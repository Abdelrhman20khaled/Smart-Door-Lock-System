
receiver_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000374c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  0000374c  000037c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002994  00000000  00000000  00003824  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ce0  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000aa2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ab8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ae19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c7 05 	call	0xb8e	; 0xb8e <main>
      7a:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 eb       	ldi	r26, 0xB9	; 185
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 eb       	ldi	r24, 0xB9	; 185
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Lcd_SmartFeaurtres>:
#include "gpio.h"
#include "util/delay.h"
#include "lcd.h"
#include "dc_motor.h"

void Lcd_SmartFeaurtres(void) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0, 0);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
	LCD_displayString("AC Status:   ");
     b46:	80 e6       	ldi	r24, 0x60	; 96
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
	LCD_moveCursor(1, 0);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
	LCD_displayString("Light Status:   ");
     b56:	8e e6       	ldi	r24, 0x6E	; 110
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
}
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <Lcd_HomeScreen>:
void Lcd_HomeScreen(void) {
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     b6c:	0e 94 1e 1a 	call	0x343c	; 0x343c <LCD_clearScreen>
	LCD_displayString("   Smart Home   ");
     b70:	8f e7       	ldi	r24, 0x7F	; 127
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
	LCD_moveCursor(1, 0);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
	LCD_displayString(" We Always Here ");
     b80:	80 e9       	ldi	r24, 0x90	; 144
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <main>:
int main(void) {
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	c1 58       	subi	r28, 0x81	; 129
     b9c:	d0 40       	sbci	r29, 0x00	; 0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	uint8 received_byte = 0;
     ba8:	fe 01       	movw	r30, r28
     baa:	ef 57       	subi	r30, 0x7F	; 127
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	10 82       	st	Z, r1
	uint8 AC_button_count = 0;
     bb0:	fe 01       	movw	r30, r28
     bb2:	e0 58       	subi	r30, 0x80	; 128
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	10 82       	st	Z, r1
	uint8 Light_button_count = 0;
     bb8:	fe 01       	movw	r30, r28
     bba:	e1 58       	subi	r30, 0x81	; 129
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	10 82       	st	Z, r1

	UART_init(9600);
     bc0:	60 e8       	ldi	r22, 0x80	; 128
     bc2:	75 e2       	ldi	r23, 0x25	; 37
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 28 1a 	call	0x3450	; 0x3450 <UART_init>
	LCD_init();
     bcc:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_init>
	Dc_Motor_Init();
     bd0:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Dc_Motor_Init>

	/*Set the direction of Motor Pins*/
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN1_ID, PIN_OUTPUT);
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN2_ID, PIN_OUTPUT);
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	62 e0       	ldi	r22, 0x02	; 2
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>

	/*Set the direction of AC Button Pin as input*/
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_HIGH);
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>

	/*Set the direction of Light Button Pin as input*/
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	63 e0       	ldi	r22, 0x03	; 3
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN3_ID, LOGIC_HIGH);
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	63 e0       	ldi	r22, 0x03	; 3
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>

	/*Set the direction of Light leds Pin as input*/
	GPIO_setupPortDirection(PORTB_ID, PORT_OUTPUT);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	6f ef       	ldi	r22, 0xFF	; 255
     c1e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <GPIO_setupPortDirection>
	GPIO_writePort(PORTB_ID, 0XFF);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	6f ef       	ldi	r22, 0xFF	; 255
     c26:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <GPIO_writePort>

	Lcd_HomeScreen();
     c2a:	0e 94 b2 05 	call	0xb64	; 0xb64 <Lcd_HomeScreen>

	while (1) {
		/*This variable always receive from the 8051*/
		received_byte = UART_recieveByte();
     c2e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_recieveByte>
     c32:	fe 01       	movw	r30, r28
     c34:	ef 57       	subi	r30, 0x7F	; 127
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 83       	st	Z, r24

		/* if receiver from 8051 char 'S' Means start */
		if (received_byte == 'S') {
     c3a:	fe 01       	movw	r30, r28
     c3c:	ef 57       	subi	r30, 0x7F	; 127
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	80 81       	ld	r24, Z
     c42:	83 35       	cpi	r24, 0x53	; 83
     c44:	09 f0       	breq	.+2      	; 0xc48 <main+0xba>
     c46:	ee c5       	rjmp	.+3036   	; 0x1824 <main+0xc96>

			Lcd_SmartFeaurtres();
     c48:	0e 94 9b 05 	call	0xb36	; 0xb36 <Lcd_SmartFeaurtres>
     c4c:	e4 c5       	rjmp	.+3016   	; 0x1816 <main+0xc88>
			while (received_byte == 'S') {
				if (GPIO_readPin(PORTD_ID, PIN2_ID) == LOGIC_LOW) {
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	62 e0       	ldi	r22, 0x02	; 2
     c52:	0e 94 67 0e 	call	0x1cce	; 0x1cce <GPIO_readPin>
     c56:	88 23       	and	r24, r24
     c58:	09 f0       	breq	.+2      	; 0xc5c <main+0xce>
     c5a:	59 c2       	rjmp	.+1202   	; 0x110e <main+0x580>
     c5c:	fe 01       	movw	r30, r28
     c5e:	e5 58       	subi	r30, 0x85	; 133
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 ef       	ldi	r26, 0xF0	; 240
     c68:	b1 e4       	ldi	r27, 0x41	; 65
     c6a:	80 83       	st	Z, r24
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	a2 83       	std	Z+2, r26	; 0x02
     c70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c72:	8e 01       	movw	r16, r28
     c74:	09 58       	subi	r16, 0x89	; 137
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	fe 01       	movw	r30, r28
     c7a:	e5 58       	subi	r30, 0x85	; 133
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	60 81       	ld	r22, Z
     c80:	71 81       	ldd	r23, Z+1	; 0x01
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	93 81       	ldd	r25, Z+3	; 0x03
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	4a e7       	ldi	r20, 0x7A	; 122
     c8c:	55 e4       	ldi	r21, 0x45	; 69
     c8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	f8 01       	movw	r30, r16
     c98:	80 83       	st	Z, r24
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	a2 83       	std	Z+2, r26	; 0x02
     c9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ca0:	fe 01       	movw	r30, r28
     ca2:	e9 58       	subi	r30, 0x89	; 137
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	60 81       	ld	r22, Z
     ca8:	71 81       	ldd	r23, Z+1	; 0x01
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e8       	ldi	r20, 0x80	; 128
     cb4:	5f e3       	ldi	r21, 0x3F	; 63
     cb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cba:	88 23       	and	r24, r24
     cbc:	44 f4       	brge	.+16     	; 0xcce <main+0x140>
		__ticks = 1;
     cbe:	fe 01       	movw	r30, r28
     cc0:	eb 58       	subi	r30, 0x8B	; 139
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	80 83       	st	Z, r24
     ccc:	64 c0       	rjmp	.+200    	; 0xd96 <main+0x208>
	else if (__tmp > 65535)
     cce:	fe 01       	movw	r30, r28
     cd0:	e9 58       	subi	r30, 0x89	; 137
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	3f ef       	ldi	r19, 0xFF	; 255
     ce0:	4f e7       	ldi	r20, 0x7F	; 127
     ce2:	57 e4       	ldi	r21, 0x47	; 71
     ce4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ce8:	18 16       	cp	r1, r24
     cea:	0c f0       	brlt	.+2      	; 0xcee <main+0x160>
     cec:	43 c0       	rjmp	.+134    	; 0xd74 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cee:	fe 01       	movw	r30, r28
     cf0:	e5 58       	subi	r30, 0x85	; 133
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e2       	ldi	r20, 0x20	; 32
     d02:	51 e4       	ldi	r21, 0x41	; 65
     d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	8e 01       	movw	r16, r28
     d0e:	0b 58       	subi	r16, 0x8B	; 139
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	f8 01       	movw	r30, r16
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
     d24:	1f c0       	rjmp	.+62     	; 0xd64 <main+0x1d6>
     d26:	fe 01       	movw	r30, r28
     d28:	ed 58       	subi	r30, 0x8D	; 141
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 e9       	ldi	r24, 0x90	; 144
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	91 83       	std	Z+1, r25	; 0x01
     d32:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d34:	fe 01       	movw	r30, r28
     d36:	ed 58       	subi	r30, 0x8D	; 141
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <main+0x1b0>
     d42:	fe 01       	movw	r30, r28
     d44:	ed 58       	subi	r30, 0x8D	; 141
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	de 01       	movw	r26, r28
     d4e:	ab 58       	subi	r26, 0x8B	; 139
     d50:	bf 4f       	sbci	r27, 0xFF	; 255
     d52:	fe 01       	movw	r30, r28
     d54:	eb 58       	subi	r30, 0x8B	; 139
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	9c 93       	st	X, r25
     d62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d64:	fe 01       	movw	r30, r28
     d66:	eb 58       	subi	r30, 0x8B	; 139
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	d1 f6       	brne	.-76     	; 0xd26 <main+0x198>
     d72:	27 c0       	rjmp	.+78     	; 0xdc2 <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	8e 01       	movw	r16, r28
     d76:	0b 58       	subi	r16, 0x8B	; 139
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	fe 01       	movw	r30, r28
     d7c:	e9 58       	subi	r30, 0x89	; 137
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	f8 01       	movw	r30, r16
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	de 01       	movw	r26, r28
     d98:	af 58       	subi	r26, 0x8F	; 143
     d9a:	bf 4f       	sbci	r27, 0xFF	; 255
     d9c:	fe 01       	movw	r30, r28
     d9e:	eb 58       	subi	r30, 0x8B	; 139
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	8d 93       	st	X+, r24
     da8:	9c 93       	st	X, r25
     daa:	fe 01       	movw	r30, r28
     dac:	ef 58       	subi	r30, 0x8F	; 143
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <main+0x226>
     db8:	fe 01       	movw	r30, r28
     dba:	ef 58       	subi	r30, 0x8F	; 143
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	80 83       	st	Z, r24
					_delay_ms(30);

					if (GPIO_readPin(PORTD_ID, PIN2_ID) == LOGIC_LOW) {
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <GPIO_readPin>
     dca:	88 23       	and	r24, r24
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <main+0x242>
     dce:	9f c1       	rjmp	.+830    	; 0x110e <main+0x580>
						AC_button_count++;
     dd0:	de 01       	movw	r26, r28
     dd2:	a0 58       	subi	r26, 0x80	; 128
     dd4:	bf 4f       	sbci	r27, 0xFF	; 255
     dd6:	fe 01       	movw	r30, r28
     dd8:	e0 58       	subi	r30, 0x80	; 128
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	80 81       	ld	r24, Z
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	8c 93       	st	X, r24
						if (AC_button_count == 1) {
     de2:	fe 01       	movw	r30, r28
     de4:	e0 58       	subi	r30, 0x80	; 128
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	09 f0       	breq	.+2      	; 0xdf0 <main+0x262>
     dee:	c0 c0       	rjmp	.+384    	; 0xf70 <main+0x3e2>
							LCD_moveCursor(0, 10);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	6a e0       	ldi	r22, 0x0A	; 10
     df4:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
							LCD_displayString("ON ");
     df8:	81 ea       	ldi	r24, 0xA1	; 161
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
							Dc_Motor_Rotate(ROTATE_RIGHT);
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	0e 94 41 0c 	call	0x1882	; 0x1882 <Dc_Motor_Rotate>
     e06:	fe 01       	movw	r30, r28
     e08:	e3 59       	subi	r30, 0x93	; 147
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	aa e7       	ldi	r26, 0x7A	; 122
     e12:	b4 e4       	ldi	r27, 0x44	; 68
     e14:	80 83       	st	Z, r24
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	a2 83       	std	Z+2, r26	; 0x02
     e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1c:	8e 01       	movw	r16, r28
     e1e:	07 59       	subi	r16, 0x97	; 151
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	fe 01       	movw	r30, r28
     e24:	e3 59       	subi	r30, 0x93	; 147
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	4a e7       	ldi	r20, 0x7A	; 122
     e36:	55 e4       	ldi	r21, 0x45	; 69
     e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	f8 01       	movw	r30, r16
     e42:	80 83       	st	Z, r24
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	a2 83       	std	Z+2, r26	; 0x02
     e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e4a:	fe 01       	movw	r30, r28
     e4c:	e7 59       	subi	r30, 0x97	; 151
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e64:	88 23       	and	r24, r24
     e66:	44 f4       	brge	.+16     	; 0xe78 <main+0x2ea>
		__ticks = 1;
     e68:	fe 01       	movw	r30, r28
     e6a:	e9 59       	subi	r30, 0x99	; 153
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24
     e76:	64 c0       	rjmp	.+200    	; 0xf40 <main+0x3b2>
	else if (__tmp > 65535)
     e78:	fe 01       	movw	r30, r28
     e7a:	e7 59       	subi	r30, 0x97	; 151
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	60 81       	ld	r22, Z
     e80:	71 81       	ldd	r23, Z+1	; 0x01
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	3f ef       	ldi	r19, 0xFF	; 255
     e8a:	4f e7       	ldi	r20, 0x7F	; 127
     e8c:	57 e4       	ldi	r21, 0x47	; 71
     e8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e92:	18 16       	cp	r1, r24
     e94:	0c f0       	brlt	.+2      	; 0xe98 <main+0x30a>
     e96:	43 c0       	rjmp	.+134    	; 0xf1e <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	fe 01       	movw	r30, r28
     e9a:	e3 59       	subi	r30, 0x93	; 147
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	60 81       	ld	r22, Z
     ea0:	71 81       	ldd	r23, Z+1	; 0x01
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	51 e4       	ldi	r21, 0x41	; 65
     eae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	8e 01       	movw	r16, r28
     eb8:	09 59       	subi	r16, 0x99	; 153
     eba:	1f 4f       	sbci	r17, 0xFF	; 255
     ebc:	bc 01       	movw	r22, r24
     ebe:	cd 01       	movw	r24, r26
     ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	f8 01       	movw	r30, r16
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
     ece:	1f c0       	rjmp	.+62     	; 0xf0e <main+0x380>
     ed0:	fe 01       	movw	r30, r28
     ed2:	eb 59       	subi	r30, 0x9B	; 155
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 e9       	ldi	r24, 0x90	; 144
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
     ede:	fe 01       	movw	r30, r28
     ee0:	eb 59       	subi	r30, 0x9B	; 155
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <main+0x35a>
     eec:	fe 01       	movw	r30, r28
     eee:	eb 59       	subi	r30, 0x9B	; 155
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	de 01       	movw	r26, r28
     ef8:	a9 59       	subi	r26, 0x99	; 153
     efa:	bf 4f       	sbci	r27, 0xFF	; 255
     efc:	fe 01       	movw	r30, r28
     efe:	e9 59       	subi	r30, 0x99	; 153
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	11 96       	adiw	r26, 0x01	; 1
     f0a:	9c 93       	st	X, r25
     f0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0e:	fe 01       	movw	r30, r28
     f10:	e9 59       	subi	r30, 0x99	; 153
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	d1 f6       	brne	.-76     	; 0xed0 <main+0x342>
     f1c:	f2 c0       	rjmp	.+484    	; 0x1102 <main+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1e:	8e 01       	movw	r16, r28
     f20:	09 59       	subi	r16, 0x99	; 153
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	fe 01       	movw	r30, r28
     f26:	e7 59       	subi	r30, 0x97	; 151
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	f8 01       	movw	r30, r16
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	80 83       	st	Z, r24
     f40:	de 01       	movw	r26, r28
     f42:	ad 59       	subi	r26, 0x9D	; 157
     f44:	bf 4f       	sbci	r27, 0xFF	; 255
     f46:	fe 01       	movw	r30, r28
     f48:	e9 59       	subi	r30, 0x99	; 153
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	11 96       	adiw	r26, 0x01	; 1
     f52:	9c 93       	st	X, r25
     f54:	8e 93       	st	-X, r24
     f56:	fe 01       	movw	r30, r28
     f58:	ed 59       	subi	r30, 0x9D	; 157
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x3d2>
     f64:	fe 01       	movw	r30, r28
     f66:	ed 59       	subi	r30, 0x9D	; 157
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	c9 c0       	rjmp	.+402    	; 0x1102 <main+0x574>
							_delay_ms(1000);
						} else if (AC_button_count == 2) {
     f70:	fe 01       	movw	r30, r28
     f72:	e0 58       	subi	r30, 0x80	; 128
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	09 f0       	breq	.+2      	; 0xf7e <main+0x3f0>
     f7c:	c2 c0       	rjmp	.+388    	; 0x1102 <main+0x574>
							AC_button_count = 0;
     f7e:	fe 01       	movw	r30, r28
     f80:	e0 58       	subi	r30, 0x80	; 128
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	10 82       	st	Z, r1
							LCD_moveCursor(0, 10);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	6a e0       	ldi	r22, 0x0A	; 10
     f8a:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
							LCD_displayString("OFF");
     f8e:	85 ea       	ldi	r24, 0xA5	; 165
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
							Dc_Motor_Rotate(ROTATE_STOP);
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	0e 94 41 0c 	call	0x1882	; 0x1882 <Dc_Motor_Rotate>
     f9c:	fe 01       	movw	r30, r28
     f9e:	e1 5a       	subi	r30, 0xA1	; 161
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	aa e7       	ldi	r26, 0x7A	; 122
     fa8:	b4 e4       	ldi	r27, 0x44	; 68
     faa:	80 83       	st	Z, r24
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	a2 83       	std	Z+2, r26	; 0x02
     fb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb2:	8e 01       	movw	r16, r28
     fb4:	05 5a       	subi	r16, 0xA5	; 165
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	fe 01       	movw	r30, r28
     fba:	e1 5a       	subi	r30, 0xA1	; 161
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a e7       	ldi	r20, 0x7A	; 122
     fcc:	55 e4       	ldi	r21, 0x45	; 69
     fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	f8 01       	movw	r30, r16
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	a2 83       	std	Z+2, r26	; 0x02
     fde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fe0:	fe 01       	movw	r30, r28
     fe2:	e5 5a       	subi	r30, 0xA5	; 165
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	44 f4       	brge	.+16     	; 0x100e <main+0x480>
		__ticks = 1;
     ffe:	fe 01       	movw	r30, r28
    1000:	e7 5a       	subi	r30, 0xA7	; 167
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
    100c:	64 c0       	rjmp	.+200    	; 0x10d6 <main+0x548>
	else if (__tmp > 65535)
    100e:	fe 01       	movw	r30, r28
    1010:	e5 5a       	subi	r30, 0xA5	; 165
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	3f ef       	ldi	r19, 0xFF	; 255
    1020:	4f e7       	ldi	r20, 0x7F	; 127
    1022:	57 e4       	ldi	r21, 0x47	; 71
    1024:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1028:	18 16       	cp	r1, r24
    102a:	0c f0       	brlt	.+2      	; 0x102e <main+0x4a0>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <main+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	fe 01       	movw	r30, r28
    1030:	e1 5a       	subi	r30, 0xA1	; 161
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	8e 01       	movw	r16, r28
    104e:	07 5a       	subi	r16, 0xA7	; 167
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	f8 01       	movw	r30, r16
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
    1064:	1f c0       	rjmp	.+62     	; 0x10a4 <main+0x516>
    1066:	fe 01       	movw	r30, r28
    1068:	e9 5a       	subi	r30, 0xA9	; 169
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 e9       	ldi	r24, 0x90	; 144
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	fe 01       	movw	r30, r28
    1076:	e9 5a       	subi	r30, 0xA9	; 169
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <main+0x4f0>
    1082:	fe 01       	movw	r30, r28
    1084:	e9 5a       	subi	r30, 0xA9	; 169
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108c:	de 01       	movw	r26, r28
    108e:	a7 5a       	subi	r26, 0xA7	; 167
    1090:	bf 4f       	sbci	r27, 0xFF	; 255
    1092:	fe 01       	movw	r30, r28
    1094:	e7 5a       	subi	r30, 0xA7	; 167
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	9c 93       	st	X, r25
    10a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a4:	fe 01       	movw	r30, r28
    10a6:	e7 5a       	subi	r30, 0xA7	; 167
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	d1 f6       	brne	.-76     	; 0x1066 <main+0x4d8>
    10b2:	27 c0       	rjmp	.+78     	; 0x1102 <main+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b4:	8e 01       	movw	r16, r28
    10b6:	07 5a       	subi	r16, 0xA7	; 167
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	fe 01       	movw	r30, r28
    10bc:	e5 5a       	subi	r30, 0xA5	; 165
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	f8 01       	movw	r30, r16
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	de 01       	movw	r26, r28
    10d8:	ab 5a       	subi	r26, 0xAB	; 171
    10da:	bf 4f       	sbci	r27, 0xFF	; 255
    10dc:	fe 01       	movw	r30, r28
    10de:	e7 5a       	subi	r30, 0xA7	; 167
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	8d 93       	st	X+, r24
    10e8:	9c 93       	st	X, r25
    10ea:	fe 01       	movw	r30, r28
    10ec:	eb 5a       	subi	r30, 0xAB	; 171
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <main+0x566>
    10f8:	fe 01       	movw	r30, r28
    10fa:	eb 5a       	subi	r30, 0xAB	; 171
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
							_delay_ms(1000);
						} else {
							/* Do No Thing*/
						}

						while (GPIO_readPin(PORTD_ID, PIN2_ID) == LOGIC_LOW)
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	62 e0       	ldi	r22, 0x02	; 2
    1106:	0e 94 67 0e 	call	0x1cce	; 0x1cce <GPIO_readPin>
    110a:	88 23       	and	r24, r24
    110c:	d1 f3       	breq	.-12     	; 0x1102 <main+0x574>
					} else {
						//Do no thing
					}
				}

				if (GPIO_readPin(PORTD_ID, PIN3_ID) == LOGIC_LOW) {
    110e:	83 e0       	ldi	r24, 0x03	; 3
    1110:	63 e0       	ldi	r22, 0x03	; 3
    1112:	0e 94 67 0e 	call	0x1cce	; 0x1cce <GPIO_readPin>
    1116:	88 23       	and	r24, r24
    1118:	09 f0       	breq	.+2      	; 0x111c <main+0x58e>
    111a:	7d c3       	rjmp	.+1786   	; 0x1816 <main+0xc88>
    111c:	fe 01       	movw	r30, r28
    111e:	ef 5a       	subi	r30, 0xAF	; 175
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a0 ef       	ldi	r26, 0xF0	; 240
    1128:	b1 e4       	ldi	r27, 0x41	; 65
    112a:	80 83       	st	Z, r24
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	a2 83       	std	Z+2, r26	; 0x02
    1130:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1132:	8e 01       	movw	r16, r28
    1134:	03 5b       	subi	r16, 0xB3	; 179
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	fe 01       	movw	r30, r28
    113a:	ef 5a       	subi	r30, 0xAF	; 175
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	82 81       	ldd	r24, Z+2	; 0x02
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	4a e7       	ldi	r20, 0x7A	; 122
    114c:	55 e4       	ldi	r21, 0x45	; 69
    114e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	f8 01       	movw	r30, r16
    1158:	80 83       	st	Z, r24
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	a2 83       	std	Z+2, r26	; 0x02
    115e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1160:	fe 01       	movw	r30, r28
    1162:	e3 5b       	subi	r30, 0xB3	; 179
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	44 f4       	brge	.+16     	; 0x118e <main+0x600>
		__ticks = 1;
    117e:	fe 01       	movw	r30, r28
    1180:	e5 5b       	subi	r30, 0xB5	; 181
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
    118c:	64 c0       	rjmp	.+200    	; 0x1256 <main+0x6c8>
	else if (__tmp > 65535)
    118e:	fe 01       	movw	r30, r28
    1190:	e3 5b       	subi	r30, 0xB3	; 179
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	60 81       	ld	r22, Z
    1196:	71 81       	ldd	r23, Z+1	; 0x01
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	93 81       	ldd	r25, Z+3	; 0x03
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	4f e7       	ldi	r20, 0x7F	; 127
    11a2:	57 e4       	ldi	r21, 0x47	; 71
    11a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11a8:	18 16       	cp	r1, r24
    11aa:	0c f0       	brlt	.+2      	; 0x11ae <main+0x620>
    11ac:	43 c0       	rjmp	.+134    	; 0x1234 <main+0x6a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	fe 01       	movw	r30, r28
    11b0:	ef 5a       	subi	r30, 0xAF	; 175
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	8e 01       	movw	r16, r28
    11ce:	05 5b       	subi	r16, 0xB5	; 181
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	f8 01       	movw	r30, r16
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
    11e4:	1f c0       	rjmp	.+62     	; 0x1224 <main+0x696>
    11e6:	fe 01       	movw	r30, r28
    11e8:	e7 5b       	subi	r30, 0xB7	; 183
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 e9       	ldi	r24, 0x90	; 144
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
    11f4:	fe 01       	movw	r30, r28
    11f6:	e7 5b       	subi	r30, 0xB7	; 183
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <main+0x670>
    1202:	fe 01       	movw	r30, r28
    1204:	e7 5b       	subi	r30, 0xB7	; 183
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120c:	de 01       	movw	r26, r28
    120e:	a5 5b       	subi	r26, 0xB5	; 181
    1210:	bf 4f       	sbci	r27, 0xFF	; 255
    1212:	fe 01       	movw	r30, r28
    1214:	e5 5b       	subi	r30, 0xB5	; 181
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	fe 01       	movw	r30, r28
    1226:	e5 5b       	subi	r30, 0xB5	; 181
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	d1 f6       	brne	.-76     	; 0x11e6 <main+0x658>
    1232:	27 c0       	rjmp	.+78     	; 0x1282 <main+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1234:	8e 01       	movw	r16, r28
    1236:	05 5b       	subi	r16, 0xB5	; 181
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	fe 01       	movw	r30, r28
    123c:	e3 5b       	subi	r30, 0xB3	; 179
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	f8 01       	movw	r30, r16
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	de 01       	movw	r26, r28
    1258:	a9 5b       	subi	r26, 0xB9	; 185
    125a:	bf 4f       	sbci	r27, 0xFF	; 255
    125c:	fe 01       	movw	r30, r28
    125e:	e5 5b       	subi	r30, 0xB5	; 181
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	8d 93       	st	X+, r24
    1268:	9c 93       	st	X, r25
    126a:	fe 01       	movw	r30, r28
    126c:	e9 5b       	subi	r30, 0xB9	; 185
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <main+0x6e6>
    1278:	fe 01       	movw	r30, r28
    127a:	e9 5b       	subi	r30, 0xB9	; 185
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
					_delay_ms(30);

					if (GPIO_readPin(PORTD_ID, PIN3_ID) == LOGIC_LOW) {
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	63 e0       	ldi	r22, 0x03	; 3
    1286:	0e 94 67 0e 	call	0x1cce	; 0x1cce <GPIO_readPin>
    128a:	88 23       	and	r24, r24
    128c:	09 f0       	breq	.+2      	; 0x1290 <main+0x702>
    128e:	c3 c2       	rjmp	.+1414   	; 0x1816 <main+0xc88>
						Light_button_count++;
    1290:	de 01       	movw	r26, r28
    1292:	a1 58       	subi	r26, 0x81	; 129
    1294:	bf 4f       	sbci	r27, 0xFF	; 255
    1296:	fe 01       	movw	r30, r28
    1298:	e1 58       	subi	r30, 0x81	; 129
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	80 81       	ld	r24, Z
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	8c 93       	st	X, r24
						if (Light_button_count == 1) {
    12a2:	fe 01       	movw	r30, r28
    12a4:	e1 58       	subi	r30, 0x81	; 129
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <main+0x722>
    12ae:	92 c0       	rjmp	.+292    	; 0x13d4 <main+0x846>
							LCD_moveCursor(1, 14);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	6e e0       	ldi	r22, 0x0E	; 14
    12b4:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
							LCD_displayString("M1 ");
    12b8:	89 ea       	ldi	r24, 0xA9	; 169
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
							GPIO_writePort(PORTB_ID, 0XFC);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	6c ef       	ldi	r22, 0xFC	; 252
    12c4:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <GPIO_writePort>
    12c8:	fe 01       	movw	r30, r28
    12ca:	ed 5b       	subi	r30, 0xBD	; 189
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	aa ef       	ldi	r26, 0xFA	; 250
    12d4:	b3 e4       	ldi	r27, 0x43	; 67
    12d6:	80 83       	st	Z, r24
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	a2 83       	std	Z+2, r26	; 0x02
    12dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	8e 01       	movw	r16, r28
    12e0:	01 5c       	subi	r16, 0xC1	; 193
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	fe 01       	movw	r30, r28
    12e6:	ed 5b       	subi	r30, 0xBD	; 189
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4a e7       	ldi	r20, 0x7A	; 122
    12f8:	55 e4       	ldi	r21, 0x45	; 69
    12fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	f8 01       	movw	r30, r16
    1304:	80 83       	st	Z, r24
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	a2 83       	std	Z+2, r26	; 0x02
    130a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    130c:	fe 01       	movw	r30, r28
    130e:	ff 96       	adiw	r30, 0x3f	; 63
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	93 81       	ldd	r25, Z+3	; 0x03
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e8       	ldi	r20, 0x80	; 128
    131e:	5f e3       	ldi	r21, 0x3F	; 63
    1320:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1324:	88 23       	and	r24, r24
    1326:	2c f4       	brge	.+10     	; 0x1332 <main+0x7a4>
		__ticks = 1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9e af       	std	Y+62, r25	; 0x3e
    132e:	8d af       	std	Y+61, r24	; 0x3d
    1330:	46 c0       	rjmp	.+140    	; 0x13be <main+0x830>
	else if (__tmp > 65535)
    1332:	fe 01       	movw	r30, r28
    1334:	ff 96       	adiw	r30, 0x3f	; 63
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	4f e7       	ldi	r20, 0x7F	; 127
    1344:	57 e4       	ldi	r21, 0x47	; 71
    1346:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    134a:	18 16       	cp	r1, r24
    134c:	64 f5       	brge	.+88     	; 0x13a6 <main+0x818>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134e:	fe 01       	movw	r30, r28
    1350:	ed 5b       	subi	r30, 0xBD	; 189
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9e af       	std	Y+62, r25	; 0x3e
    137a:	8d af       	std	Y+61, r24	; 0x3d
    137c:	0f c0       	rjmp	.+30     	; 0x139c <main+0x80e>
    137e:	80 e9       	ldi	r24, 0x90	; 144
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	9c af       	std	Y+60, r25	; 0x3c
    1384:	8b af       	std	Y+59, r24	; 0x3b
    1386:	8b ad       	ldd	r24, Y+59	; 0x3b
    1388:	9c ad       	ldd	r25, Y+60	; 0x3c
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <main+0x7fc>
    138e:	9c af       	std	Y+60, r25	; 0x3c
    1390:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8d ad       	ldd	r24, Y+61	; 0x3d
    1394:	9e ad       	ldd	r25, Y+62	; 0x3e
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	9e af       	std	Y+62, r25	; 0x3e
    139a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8d ad       	ldd	r24, Y+61	; 0x3d
    139e:	9e ad       	ldd	r25, Y+62	; 0x3e
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <main+0x7f0>
    13a4:	32 c2       	rjmp	.+1124   	; 0x180a <main+0xc7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	fe 01       	movw	r30, r28
    13a8:	ff 96       	adiw	r30, 0x3f	; 63
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9e af       	std	Y+62, r25	; 0x3e
    13bc:	8d af       	std	Y+61, r24	; 0x3d
    13be:	8d ad       	ldd	r24, Y+61	; 0x3d
    13c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13c2:	9a af       	std	Y+58, r25	; 0x3a
    13c4:	89 af       	std	Y+57, r24	; 0x39
    13c6:	89 ad       	ldd	r24, Y+57	; 0x39
    13c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <main+0x83c>
    13ce:	9a af       	std	Y+58, r25	; 0x3a
    13d0:	89 af       	std	Y+57, r24	; 0x39
    13d2:	1b c2       	rjmp	.+1078   	; 0x180a <main+0xc7c>
							_delay_ms(500);
						} else if (Light_button_count == 2) {
    13d4:	fe 01       	movw	r30, r28
    13d6:	e1 58       	subi	r30, 0x81	; 129
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	09 f0       	breq	.+2      	; 0x13e2 <main+0x854>
    13e0:	7f c0       	rjmp	.+254    	; 0x14e0 <main+0x952>
							LCD_moveCursor(1, 14);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	6e e0       	ldi	r22, 0x0E	; 14
    13e6:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
							LCD_displayString("M2 ");
    13ea:	8d ea       	ldi	r24, 0xAD	; 173
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
							GPIO_writePort(PORTB_ID, 0XF3);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	63 ef       	ldi	r22, 0xF3	; 243
    13f6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <GPIO_writePort>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	aa ef       	ldi	r26, 0xFA	; 250
    1400:	b3 e4       	ldi	r27, 0x43	; 67
    1402:	8d ab       	std	Y+53, r24	; 0x35
    1404:	9e ab       	std	Y+54, r25	; 0x36
    1406:	af ab       	std	Y+55, r26	; 0x37
    1408:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	6d a9       	ldd	r22, Y+53	; 0x35
    140c:	7e a9       	ldd	r23, Y+54	; 0x36
    140e:	8f a9       	ldd	r24, Y+55	; 0x37
    1410:	98 ad       	ldd	r25, Y+56	; 0x38
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a e7       	ldi	r20, 0x7A	; 122
    1418:	55 e4       	ldi	r21, 0x45	; 69
    141a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	89 ab       	std	Y+49, r24	; 0x31
    1424:	9a ab       	std	Y+50, r25	; 0x32
    1426:	ab ab       	std	Y+51, r26	; 0x33
    1428:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    142a:	69 a9       	ldd	r22, Y+49	; 0x31
    142c:	7a a9       	ldd	r23, Y+50	; 0x32
    142e:	8b a9       	ldd	r24, Y+51	; 0x33
    1430:	9c a9       	ldd	r25, Y+52	; 0x34
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <main+0x8be>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	98 ab       	std	Y+48, r25	; 0x30
    1448:	8f a7       	std	Y+47, r24	; 0x2f
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <main+0x93c>
	else if (__tmp > 65535)
    144c:	69 a9       	ldd	r22, Y+49	; 0x31
    144e:	7a a9       	ldd	r23, Y+50	; 0x32
    1450:	8b a9       	ldd	r24, Y+51	; 0x33
    1452:	9c a9       	ldd	r25, Y+52	; 0x34
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <main+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	6d a9       	ldd	r22, Y+53	; 0x35
    1466:	7e a9       	ldd	r23, Y+54	; 0x36
    1468:	8f a9       	ldd	r24, Y+55	; 0x37
    146a:	98 ad       	ldd	r25, Y+56	; 0x38
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	98 ab       	std	Y+48, r25	; 0x30
    148a:	8f a7       	std	Y+47, r24	; 0x2f
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <main+0x91e>
    148e:	80 e9       	ldi	r24, 0x90	; 144
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	9e a7       	std	Y+46, r25	; 0x2e
    1494:	8d a7       	std	Y+45, r24	; 0x2d
    1496:	8d a5       	ldd	r24, Y+45	; 0x2d
    1498:	9e a5       	ldd	r25, Y+46	; 0x2e
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <main+0x90c>
    149e:	9e a7       	std	Y+46, r25	; 0x2e
    14a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a4:	98 a9       	ldd	r25, Y+48	; 0x30
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	98 ab       	std	Y+48, r25	; 0x30
    14aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ae:	98 a9       	ldd	r25, Y+48	; 0x30
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <main+0x900>
    14b4:	aa c1       	rjmp	.+852    	; 0x180a <main+0xc7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	69 a9       	ldd	r22, Y+49	; 0x31
    14b8:	7a a9       	ldd	r23, Y+50	; 0x32
    14ba:	8b a9       	ldd	r24, Y+51	; 0x33
    14bc:	9c a9       	ldd	r25, Y+52	; 0x34
    14be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	98 ab       	std	Y+48, r25	; 0x30
    14c8:	8f a7       	std	Y+47, r24	; 0x2f
    14ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    14cc:	98 a9       	ldd	r25, Y+48	; 0x30
    14ce:	9c a7       	std	Y+44, r25	; 0x2c
    14d0:	8b a7       	std	Y+43, r24	; 0x2b
    14d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    14d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <main+0x948>
    14da:	9c a7       	std	Y+44, r25	; 0x2c
    14dc:	8b a7       	std	Y+43, r24	; 0x2b
    14de:	95 c1       	rjmp	.+810    	; 0x180a <main+0xc7c>
							_delay_ms(500);
						} else if (Light_button_count == 3) {
    14e0:	fe 01       	movw	r30, r28
    14e2:	e1 58       	subi	r30, 0x81	; 129
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	09 f0       	breq	.+2      	; 0x14ee <main+0x960>
    14ec:	7f c0       	rjmp	.+254    	; 0x15ec <main+0xa5e>
							LCD_moveCursor(1, 14);
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	6e e0       	ldi	r22, 0x0E	; 14
    14f2:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
							LCD_displayString("M3 ");
    14f6:	81 eb       	ldi	r24, 0xB1	; 177
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
							GPIO_writePort(PORTB_ID, 0XCF);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	6f ec       	ldi	r22, 0xCF	; 207
    1502:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <GPIO_writePort>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	aa ef       	ldi	r26, 0xFA	; 250
    150c:	b3 e4       	ldi	r27, 0x43	; 67
    150e:	8f a3       	std	Y+39, r24	; 0x27
    1510:	98 a7       	std	Y+40, r25	; 0x28
    1512:	a9 a7       	std	Y+41, r26	; 0x29
    1514:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6f a1       	ldd	r22, Y+39	; 0x27
    1518:	78 a5       	ldd	r23, Y+40	; 0x28
    151a:	89 a5       	ldd	r24, Y+41	; 0x29
    151c:	9a a5       	ldd	r25, Y+42	; 0x2a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a e7       	ldi	r20, 0x7A	; 122
    1524:	55 e4       	ldi	r21, 0x45	; 69
    1526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8b a3       	std	Y+35, r24	; 0x23
    1530:	9c a3       	std	Y+36, r25	; 0x24
    1532:	ad a3       	std	Y+37, r26	; 0x25
    1534:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1536:	6b a1       	ldd	r22, Y+35	; 0x23
    1538:	7c a1       	ldd	r23, Y+36	; 0x24
    153a:	8d a1       	ldd	r24, Y+37	; 0x25
    153c:	9e a1       	ldd	r25, Y+38	; 0x26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <main+0x9ca>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9a a3       	std	Y+34, r25	; 0x22
    1554:	89 a3       	std	Y+33, r24	; 0x21
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <main+0xa48>
	else if (__tmp > 65535)
    1558:	6b a1       	ldd	r22, Y+35	; 0x23
    155a:	7c a1       	ldd	r23, Y+36	; 0x24
    155c:	8d a1       	ldd	r24, Y+37	; 0x25
    155e:	9e a1       	ldd	r25, Y+38	; 0x26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <main+0xa34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6f a1       	ldd	r22, Y+39	; 0x27
    1572:	78 a5       	ldd	r23, Y+40	; 0x28
    1574:	89 a5       	ldd	r24, Y+41	; 0x29
    1576:	9a a5       	ldd	r25, Y+42	; 0x2a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <main+0xa2a>
    159a:	80 e9       	ldi	r24, 0x90	; 144
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	98 a3       	std	Y+32, r25	; 0x20
    15a0:	8f 8f       	std	Y+31, r24	; 0x1f
    15a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a4:	98 a1       	ldd	r25, Y+32	; 0x20
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <main+0xa18>
    15aa:	98 a3       	std	Y+32, r25	; 0x20
    15ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
    15b0:	9a a1       	ldd	r25, Y+34	; 0x22
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9a a3       	std	Y+34, r25	; 0x22
    15b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ba:	9a a1       	ldd	r25, Y+34	; 0x22
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <main+0xa0c>
    15c0:	24 c1       	rjmp	.+584    	; 0x180a <main+0xc7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6b a1       	ldd	r22, Y+35	; 0x23
    15c4:	7c a1       	ldd	r23, Y+36	; 0x24
    15c6:	8d a1       	ldd	r24, Y+37	; 0x25
    15c8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9a a3       	std	Y+34, r25	; 0x22
    15d4:	89 a3       	std	Y+33, r24	; 0x21
    15d6:	89 a1       	ldd	r24, Y+33	; 0x21
    15d8:	9a a1       	ldd	r25, Y+34	; 0x22
    15da:	9e 8f       	std	Y+30, r25	; 0x1e
    15dc:	8d 8f       	std	Y+29, r24	; 0x1d
    15de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <main+0xa54>
    15e6:	9e 8f       	std	Y+30, r25	; 0x1e
    15e8:	8d 8f       	std	Y+29, r24	; 0x1d
    15ea:	0f c1       	rjmp	.+542    	; 0x180a <main+0xc7c>
							_delay_ms(500);
						} else if (Light_button_count == 4) {
    15ec:	fe 01       	movw	r30, r28
    15ee:	e1 58       	subi	r30, 0x81	; 129
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 81       	ld	r24, Z
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	09 f0       	breq	.+2      	; 0x15fa <main+0xa6c>
    15f8:	7f c0       	rjmp	.+254    	; 0x16f8 <main+0xb6a>

							LCD_moveCursor(1, 14);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	6e e0       	ldi	r22, 0x0E	; 14
    15fe:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
							LCD_displayString("M4 ");
    1602:	85 eb       	ldi	r24, 0xB5	; 181
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
							GPIO_writePort(PORTB_ID, 0X3F);
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	6f e3       	ldi	r22, 0x3F	; 63
    160e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <GPIO_writePort>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	aa ef       	ldi	r26, 0xFA	; 250
    1618:	b3 e4       	ldi	r27, 0x43	; 67
    161a:	89 8f       	std	Y+25, r24	; 0x19
    161c:	9a 8f       	std	Y+26, r25	; 0x1a
    161e:	ab 8f       	std	Y+27, r26	; 0x1b
    1620:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	69 8d       	ldd	r22, Y+25	; 0x19
    1624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a e7       	ldi	r20, 0x7A	; 122
    1630:	55 e4       	ldi	r21, 0x45	; 69
    1632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8d 8b       	std	Y+21, r24	; 0x15
    163c:	9e 8b       	std	Y+22, r25	; 0x16
    163e:	af 8b       	std	Y+23, r26	; 0x17
    1640:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1642:	6d 89       	ldd	r22, Y+21	; 0x15
    1644:	7e 89       	ldd	r23, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	5f e3       	ldi	r21, 0x3F	; 63
    1652:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1656:	88 23       	and	r24, r24
    1658:	2c f4       	brge	.+10     	; 0x1664 <main+0xad6>
		__ticks = 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9c 8b       	std	Y+20, r25	; 0x14
    1660:	8b 8b       	std	Y+19, r24	; 0x13
    1662:	3f c0       	rjmp	.+126    	; 0x16e2 <main+0xb54>
	else if (__tmp > 65535)
    1664:	6d 89       	ldd	r22, Y+21	; 0x15
    1666:	7e 89       	ldd	r23, Y+22	; 0x16
    1668:	8f 89       	ldd	r24, Y+23	; 0x17
    166a:	98 8d       	ldd	r25, Y+24	; 0x18
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	3f ef       	ldi	r19, 0xFF	; 255
    1670:	4f e7       	ldi	r20, 0x7F	; 127
    1672:	57 e4       	ldi	r21, 0x47	; 71
    1674:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1678:	18 16       	cp	r1, r24
    167a:	4c f5       	brge	.+82     	; 0x16ce <main+0xb40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	69 8d       	ldd	r22, Y+25	; 0x19
    167e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9c 8b       	std	Y+20, r25	; 0x14
    16a2:	8b 8b       	std	Y+19, r24	; 0x13
    16a4:	0f c0       	rjmp	.+30     	; 0x16c4 <main+0xb36>
    16a6:	80 e9       	ldi	r24, 0x90	; 144
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	9a 8b       	std	Y+18, r25	; 0x12
    16ac:	89 8b       	std	Y+17, r24	; 0x11
    16ae:	89 89       	ldd	r24, Y+17	; 0x11
    16b0:	9a 89       	ldd	r25, Y+18	; 0x12
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <main+0xb24>
    16b6:	9a 8b       	std	Y+18, r25	; 0x12
    16b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ba:	8b 89       	ldd	r24, Y+19	; 0x13
    16bc:	9c 89       	ldd	r25, Y+20	; 0x14
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	9c 8b       	std	Y+20, r25	; 0x14
    16c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c4:	8b 89       	ldd	r24, Y+19	; 0x13
    16c6:	9c 89       	ldd	r25, Y+20	; 0x14
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	69 f7       	brne	.-38     	; 0x16a6 <main+0xb18>
    16cc:	9e c0       	rjmp	.+316    	; 0x180a <main+0xc7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ce:	6d 89       	ldd	r22, Y+21	; 0x15
    16d0:	7e 89       	ldd	r23, Y+22	; 0x16
    16d2:	8f 89       	ldd	r24, Y+23	; 0x17
    16d4:	98 8d       	ldd	r25, Y+24	; 0x18
    16d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9c 8b       	std	Y+20, r25	; 0x14
    16e0:	8b 8b       	std	Y+19, r24	; 0x13
    16e2:	8b 89       	ldd	r24, Y+19	; 0x13
    16e4:	9c 89       	ldd	r25, Y+20	; 0x14
    16e6:	98 8b       	std	Y+16, r25	; 0x10
    16e8:	8f 87       	std	Y+15, r24	; 0x0f
    16ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ec:	98 89       	ldd	r25, Y+16	; 0x10
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <main+0xb60>
    16f2:	98 8b       	std	Y+16, r25	; 0x10
    16f4:	8f 87       	std	Y+15, r24	; 0x0f
    16f6:	89 c0       	rjmp	.+274    	; 0x180a <main+0xc7c>
							_delay_ms(500);
						} else if (Light_button_count == 5) {
    16f8:	fe 01       	movw	r30, r28
    16fa:	e1 58       	subi	r30, 0x81	; 129
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	85 30       	cpi	r24, 0x05	; 5
    1702:	09 f0       	breq	.+2      	; 0x1706 <main+0xb78>
    1704:	82 c0       	rjmp	.+260    	; 0x180a <main+0xc7c>
							Light_button_count = 0;
    1706:	fe 01       	movw	r30, r28
    1708:	e1 58       	subi	r30, 0x81	; 129
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	10 82       	st	Z, r1
							LCD_moveCursor(1, 13);
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	6d e0       	ldi	r22, 0x0D	; 13
    1712:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
							LCD_displayString("OFF");
    1716:	85 ea       	ldi	r24, 0xA5	; 165
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
							GPIO_writePort(PORTB_ID, 0XFF);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	6f ef       	ldi	r22, 0xFF	; 255
    1722:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <GPIO_writePort>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	aa ef       	ldi	r26, 0xFA	; 250
    172c:	b3 e4       	ldi	r27, 0x43	; 67
    172e:	8b 87       	std	Y+11, r24	; 0x0b
    1730:	9c 87       	std	Y+12, r25	; 0x0c
    1732:	ad 87       	std	Y+13, r26	; 0x0d
    1734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1736:	6b 85       	ldd	r22, Y+11	; 0x0b
    1738:	7c 85       	ldd	r23, Y+12	; 0x0c
    173a:	8d 85       	ldd	r24, Y+13	; 0x0d
    173c:	9e 85       	ldd	r25, Y+14	; 0x0e
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a e7       	ldi	r20, 0x7A	; 122
    1744:	55 e4       	ldi	r21, 0x45	; 69
    1746:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	8f 83       	std	Y+7, r24	; 0x07
    1750:	98 87       	std	Y+8, r25	; 0x08
    1752:	a9 87       	std	Y+9, r26	; 0x09
    1754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1756:	6f 81       	ldd	r22, Y+7	; 0x07
    1758:	78 85       	ldd	r23, Y+8	; 0x08
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	5f e3       	ldi	r21, 0x3F	; 63
    1766:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    176a:	88 23       	and	r24, r24
    176c:	2c f4       	brge	.+10     	; 0x1778 <main+0xbea>
		__ticks = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	3f c0       	rjmp	.+126    	; 0x17f6 <main+0xc68>
	else if (__tmp > 65535)
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	4c f5       	brge	.+82     	; 0x17e2 <main+0xc54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e2       	ldi	r20, 0x20	; 32
    179e:	51 e4       	ldi	r21, 0x41	; 65
    17a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <main+0xc4a>
    17ba:	80 e9       	ldi	r24, 0x90	; 144
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <main+0xc38>
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9e 81       	ldd	r25, Y+6	; 0x06
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	9e 81       	ldd	r25, Y+6	; 0x06
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	69 f7       	brne	.-38     	; 0x17ba <main+0xc2c>
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <main+0xc7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <main+0xc74>
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(500);
						} else {
							/* Do No Thing*/
						}

						while (GPIO_readPin(PORTD_ID, PIN3_ID) == 0)
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	63 e0       	ldi	r22, 0x03	; 3
    180e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <GPIO_readPin>
    1812:	88 23       	and	r24, r24
    1814:	d1 f3       	breq	.-12     	; 0x180a <main+0xc7c>

		/* if receiver from 8051 char 'S' Means start */
		if (received_byte == 'S') {

			Lcd_SmartFeaurtres();
			while (received_byte == 'S') {
    1816:	fe 01       	movw	r30, r28
    1818:	ef 57       	subi	r30, 0x7F	; 127
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	83 35       	cpi	r24, 0x53	; 83
    1820:	09 f4       	brne	.+2      	; 0x1824 <main+0xc96>
    1822:	15 ca       	rjmp	.-3030   	; 0xc4e <main+0xc0>
							;
					}
				}
			}
		}
		if (received_byte != 'S') {
    1824:	fe 01       	movw	r30, r28
    1826:	ef 57       	subi	r30, 0x7F	; 127
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	80 81       	ld	r24, Z
    182c:	83 35       	cpi	r24, 0x53	; 83
    182e:	09 f4       	brne	.+2      	; 0x1832 <main+0xca4>
    1830:	fe c9       	rjmp	.-3076   	; 0xc2e <main+0xa0>

			Lcd_HomeScreen();
    1832:	0e 94 b2 05 	call	0xb64	; 0xb64 <Lcd_HomeScreen>
    1836:	fb c9       	rjmp	.-3082   	; 0xc2e <main+0xa0>

00001838 <Dc_Motor_Init>:
#include "dc_motor.h"
#include "std_types.h"
#include "gpio.h"

void Dc_Motor_Init(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID,PIN0_ID,PIN_OUTPUT);
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN1_ID,PIN_OUTPUT);
    184a:	82 e0       	ldi	r24, 0x02	; 2
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_OUTPUT);
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	62 e0       	ldi	r22, 0x02	; 2
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <Dc_Motor_Rotate>:

void Dc_Motor_Rotate(uint8 direction)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <Dc_Motor_Rotate+0x6>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>

	switch(direction)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3b 83       	std	Y+3, r19	; 0x03
    18a2:	2a 83       	std	Y+2, r18	; 0x02
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	a1 f0       	breq	.+40     	; 0x18d6 <Dc_Motor_Rotate+0x54>
    18ae:	2a 81       	ldd	r18, Y+2	; 0x02
    18b0:	3b 81       	ldd	r19, Y+3	; 0x03
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	d1 f0       	breq	.+52     	; 0x18ec <Dc_Motor_Rotate+0x6a>
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	09 f5       	brne	.+66     	; 0x1902 <Dc_Motor_Rotate+0x80>
	{

	case ROTATE_LEFT:
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_HIGH);
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	41 e0       	ldi	r20, 0x01	; 1
    18c6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    18d4:	20 c0       	rjmp	.+64     	; 0x1916 <Dc_Motor_Rotate+0x94>
		break;

	case ROTATE_RIGHT:
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_HIGH);
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    18ea:	15 c0       	rjmp	.+42     	; 0x1916 <Dc_Motor_Rotate+0x94>
		break;
	case ROTATE_STOP:
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    1900:	0a c0       	rjmp	.+20     	; 0x1916 <Dc_Motor_Rotate+0x94>
		break;

	default:
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
		break;
	}
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <GPIO_setupPinDirection+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <GPIO_setupPinDirection+0x8>
    192a:	0f 92       	push	r0
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	6a 83       	std	Y+2, r22	; 0x02
    1934:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	88 30       	cpi	r24, 0x08	; 8
    193a:	08 f0       	brcs	.+2      	; 0x193e <GPIO_setupPinDirection+0x1c>
    193c:	d5 c0       	rjmp	.+426    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	84 30       	cpi	r24, 0x04	; 4
    1942:	08 f0       	brcs	.+2      	; 0x1946 <GPIO_setupPinDirection+0x24>
    1944:	d1 c0       	rjmp	.+418    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3d 83       	std	Y+5, r19	; 0x05
    194e:	2c 83       	std	Y+4, r18	; 0x04
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <GPIO_setupPinDirection+0x3a>
    195a:	43 c0       	rjmp	.+134    	; 0x19e2 <GPIO_setupPinDirection+0xc0>
    195c:	2c 81       	ldd	r18, Y+4	; 0x04
    195e:	3d 81       	ldd	r19, Y+5	; 0x05
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	2c f4       	brge	.+10     	; 0x1970 <GPIO_setupPinDirection+0x4e>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	71 f0       	breq	.+28     	; 0x198a <GPIO_setupPinDirection+0x68>
    196e:	bc c0       	rjmp	.+376    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <GPIO_setupPinDirection+0x5a>
    197a:	5f c0       	rjmp	.+190    	; 0x1a3a <GPIO_setupPinDirection+0x118>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <GPIO_setupPinDirection+0x66>
    1986:	85 c0       	rjmp	.+266    	; 0x1a92 <GPIO_setupPinDirection+0x170>
    1988:	af c0       	rjmp	.+350    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1990:	aa e3       	ldi	r26, 0x3A	; 58
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ea e3       	ldi	r30, 0x3A	; 58
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <GPIO_setupPinDirection+0x8c>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <GPIO_setupPinDirection+0x88>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	98 c0       	rjmp	.+304    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19b8:	aa e3       	ldi	r26, 0x3A	; 58
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	ea e3       	ldi	r30, 0x3A	; 58
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GPIO_setupPinDirection+0xb4>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <GPIO_setupPinDirection+0xb0>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	83 c0       	rjmp	.+262    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	a1 f4       	brne	.+40     	; 0x1a10 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19e8:	a7 e3       	ldi	r26, 0x37	; 55
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e7 e3       	ldi	r30, 0x37	; 55
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <GPIO_setupPinDirection+0xe4>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <GPIO_setupPinDirection+0xe0>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	6c c0       	rjmp	.+216    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a10:	a7 e3       	ldi	r26, 0x37	; 55
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e7 e3       	ldi	r30, 0x37	; 55
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_setupPinDirection+0x10c>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_setupPinDirection+0x108>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	57 c0       	rjmp	.+174    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	a1 f4       	brne	.+40     	; 0x1a68 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a40:	a4 e3       	ldi	r26, 0x34	; 52
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e4 e3       	ldi	r30, 0x34	; 52
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_setupPinDirection+0x13c>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_setupPinDirection+0x138>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	40 c0       	rjmp	.+128    	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a68:	a4 e3       	ldi	r26, 0x34	; 52
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e4 e3       	ldi	r30, 0x34	; 52
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <GPIO_setupPinDirection+0x164>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <GPIO_setupPinDirection+0x160>
    1a8a:	80 95       	com	r24
    1a8c:	84 23       	and	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	2b c0       	rjmp	.+86     	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	a1 f4       	brne	.+40     	; 0x1ac0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a98:	a1 e3       	ldi	r26, 0x31	; 49
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e1 e3       	ldi	r30, 0x31	; 49
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <GPIO_setupPinDirection+0x194>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <GPIO_setupPinDirection+0x190>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ac0:	a1 e3       	ldi	r26, 0x31	; 49
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e1 e3       	ldi	r30, 0x31	; 49
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <GPIO_setupPinDirection+0x1bc>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <GPIO_setupPinDirection+0x1b8>
    1ae2:	80 95       	com	r24
    1ae4:	84 23       	and	r24, r20
    1ae6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <GPIO_writePin+0x6>
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <GPIO_writePin+0x8>
    1b00:	0f 92       	push	r0
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	6a 83       	std	Y+2, r22	; 0x02
    1b0a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	88 30       	cpi	r24, 0x08	; 8
    1b10:	08 f0       	brcs	.+2      	; 0x1b14 <GPIO_writePin+0x1c>
    1b12:	d5 c0       	rjmp	.+426    	; 0x1cbe <GPIO_writePin+0x1c6>
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	84 30       	cpi	r24, 0x04	; 4
    1b18:	08 f0       	brcs	.+2      	; 0x1b1c <GPIO_writePin+0x24>
    1b1a:	d1 c0       	rjmp	.+418    	; 0x1cbe <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	3d 83       	std	Y+5, r19	; 0x05
    1b24:	2c 83       	std	Y+4, r18	; 0x04
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <GPIO_writePin+0x3a>
    1b30:	43 c0       	rjmp	.+134    	; 0x1bb8 <GPIO_writePin+0xc0>
    1b32:	2c 81       	ldd	r18, Y+4	; 0x04
    1b34:	3d 81       	ldd	r19, Y+5	; 0x05
    1b36:	22 30       	cpi	r18, 0x02	; 2
    1b38:	31 05       	cpc	r19, r1
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <GPIO_writePin+0x4e>
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	71 f0       	breq	.+28     	; 0x1b60 <GPIO_writePin+0x68>
    1b44:	bc c0       	rjmp	.+376    	; 0x1cbe <GPIO_writePin+0x1c6>
    1b46:	2c 81       	ldd	r18, Y+4	; 0x04
    1b48:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <GPIO_writePin+0x5a>
    1b50:	5f c0       	rjmp	.+190    	; 0x1c10 <GPIO_writePin+0x118>
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	9d 81       	ldd	r25, Y+5	; 0x05
    1b56:	83 30       	cpi	r24, 0x03	; 3
    1b58:	91 05       	cpc	r25, r1
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <GPIO_writePin+0x66>
    1b5c:	85 c0       	rjmp	.+266    	; 0x1c68 <GPIO_writePin+0x170>
    1b5e:	af c0       	rjmp	.+350    	; 0x1cbe <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	a1 f4       	brne	.+40     	; 0x1b8e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b66:	ab e3       	ldi	r26, 0x3B	; 59
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	eb e3       	ldi	r30, 0x3B	; 59
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_writePin+0x8c>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_writePin+0x88>
    1b88:	84 2b       	or	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	98 c0       	rjmp	.+304    	; 0x1cbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b8e:	ab e3       	ldi	r26, 0x3B	; 59
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	eb e3       	ldi	r30, 0x3B	; 59
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <GPIO_writePin+0xb4>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <GPIO_writePin+0xb0>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	83 c0       	rjmp	.+262    	; 0x1cbe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	a1 f4       	brne	.+40     	; 0x1be6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1bbe:	a8 e3       	ldi	r26, 0x38	; 56
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e8 e3       	ldi	r30, 0x38	; 56
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <GPIO_writePin+0xe4>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <GPIO_writePin+0xe0>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	6c c0       	rjmp	.+216    	; 0x1cbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1be6:	a8 e3       	ldi	r26, 0x38	; 56
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e8 e3       	ldi	r30, 0x38	; 56
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <GPIO_writePin+0x10c>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <GPIO_writePin+0x108>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	57 c0       	rjmp	.+174    	; 0x1cbe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	a1 f4       	brne	.+40     	; 0x1c3e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c16:	a5 e3       	ldi	r26, 0x35	; 53
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e5 e3       	ldi	r30, 0x35	; 53
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <GPIO_writePin+0x13c>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <GPIO_writePin+0x138>
    1c38:	84 2b       	or	r24, r20
    1c3a:	8c 93       	st	X, r24
    1c3c:	40 c0       	rjmp	.+128    	; 0x1cbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c3e:	a5 e3       	ldi	r26, 0x35	; 53
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e5 e3       	ldi	r30, 0x35	; 53
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <GPIO_writePin+0x164>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <GPIO_writePin+0x160>
    1c60:	80 95       	com	r24
    1c62:	84 23       	and	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	2b c0       	rjmp	.+86     	; 0x1cbe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	a1 f4       	brne	.+40     	; 0x1c96 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c6e:	a2 e3       	ldi	r26, 0x32	; 50
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e2 e3       	ldi	r30, 0x32	; 50
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <GPIO_writePin+0x194>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <GPIO_writePin+0x190>
    1c90:	84 2b       	or	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c96:	a2 e3       	ldi	r26, 0x32	; 50
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e2 e3       	ldi	r30, 0x32	; 50
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <GPIO_writePin+0x1bc>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <GPIO_writePin+0x1b8>
    1cb8:	80 95       	com	r24
    1cba:	84 23       	and	r24, r20
    1cbc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <GPIO_readPin+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_readPin+0x8>
    1cd6:	0f 92       	push	r0
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	8a 83       	std	Y+2, r24	; 0x02
    1cde:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1ce0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	88 30       	cpi	r24, 0x08	; 8
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <GPIO_readPin+0x1c>
    1ce8:	84 c0       	rjmp	.+264    	; 0x1df2 <GPIO_readPin+0x124>
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	84 30       	cpi	r24, 0x04	; 4
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <GPIO_readPin+0x24>
    1cf0:	80 c0       	rjmp	.+256    	; 0x1df2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	3d 83       	std	Y+5, r19	; 0x05
    1cfa:	2c 83       	std	Y+4, r18	; 0x04
    1cfc:	4c 81       	ldd	r20, Y+4	; 0x04
    1cfe:	5d 81       	ldd	r21, Y+5	; 0x05
    1d00:	41 30       	cpi	r20, 0x01	; 1
    1d02:	51 05       	cpc	r21, r1
    1d04:	79 f1       	breq	.+94     	; 0x1d64 <GPIO_readPin+0x96>
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0a:	82 30       	cpi	r24, 0x02	; 2
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	34 f4       	brge	.+12     	; 0x1d1c <GPIO_readPin+0x4e>
    1d10:	2c 81       	ldd	r18, Y+4	; 0x04
    1d12:	3d 81       	ldd	r19, Y+5	; 0x05
    1d14:	21 15       	cp	r18, r1
    1d16:	31 05       	cpc	r19, r1
    1d18:	69 f0       	breq	.+26     	; 0x1d34 <GPIO_readPin+0x66>
    1d1a:	6b c0       	rjmp	.+214    	; 0x1df2 <GPIO_readPin+0x124>
    1d1c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d1e:	5d 81       	ldd	r21, Y+5	; 0x05
    1d20:	42 30       	cpi	r20, 0x02	; 2
    1d22:	51 05       	cpc	r21, r1
    1d24:	b9 f1       	breq	.+110    	; 0x1d94 <GPIO_readPin+0xc6>
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <GPIO_readPin+0x64>
    1d30:	49 c0       	rjmp	.+146    	; 0x1dc4 <GPIO_readPin+0xf6>
    1d32:	5f c0       	rjmp	.+190    	; 0x1df2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d34:	e9 e3       	ldi	r30, 0x39	; 57
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a9 01       	movw	r20, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <GPIO_readPin+0x7e>
    1d48:	55 95       	asr	r21
    1d4a:	47 95       	ror	r20
    1d4c:	8a 95       	dec	r24
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <GPIO_readPin+0x7a>
    1d50:	ca 01       	movw	r24, r20
    1d52:	81 70       	andi	r24, 0x01	; 1
    1d54:	90 70       	andi	r25, 0x00	; 0
    1d56:	88 23       	and	r24, r24
    1d58:	19 f0       	breq	.+6      	; 0x1d60 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	49 c0       	rjmp	.+146    	; 0x1df2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d60:	19 82       	std	Y+1, r1	; 0x01
    1d62:	47 c0       	rjmp	.+142    	; 0x1df2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d64:	e6 e3       	ldi	r30, 0x36	; 54
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a9 01       	movw	r20, r18
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <GPIO_readPin+0xae>
    1d78:	55 95       	asr	r21
    1d7a:	47 95       	ror	r20
    1d7c:	8a 95       	dec	r24
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <GPIO_readPin+0xaa>
    1d80:	ca 01       	movw	r24, r20
    1d82:	81 70       	andi	r24, 0x01	; 1
    1d84:	90 70       	andi	r25, 0x00	; 0
    1d86:	88 23       	and	r24, r24
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	31 c0       	rjmp	.+98     	; 0x1df2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d90:	19 82       	std	Y+1, r1	; 0x01
    1d92:	2f c0       	rjmp	.+94     	; 0x1df2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d94:	e3 e3       	ldi	r30, 0x33	; 51
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a9 01       	movw	r20, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <GPIO_readPin+0xde>
    1da8:	55 95       	asr	r21
    1daa:	47 95       	ror	r20
    1dac:	8a 95       	dec	r24
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <GPIO_readPin+0xda>
    1db0:	ca 01       	movw	r24, r20
    1db2:	81 70       	andi	r24, 0x01	; 1
    1db4:	90 70       	andi	r25, 0x00	; 0
    1db6:	88 23       	and	r24, r24
    1db8:	19 f0       	breq	.+6      	; 0x1dc0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	19 c0       	rjmp	.+50     	; 0x1df2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dc0:	19 82       	std	Y+1, r1	; 0x01
    1dc2:	17 c0       	rjmp	.+46     	; 0x1df2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1dc4:	e0 e3       	ldi	r30, 0x30	; 48
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a9 01       	movw	r20, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <GPIO_readPin+0x10e>
    1dd8:	55 95       	asr	r21
    1dda:	47 95       	ror	r20
    1ddc:	8a 95       	dec	r24
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <GPIO_readPin+0x10a>
    1de0:	ca 01       	movw	r24, r20
    1de2:	81 70       	andi	r24, 0x01	; 1
    1de4:	90 70       	andi	r25, 0x00	; 0
    1de6:	88 23       	and	r24, r24
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1df0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <GPIO_setupPortDirection+0x6>
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <GPIO_setupPortDirection+0x8>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	84 30       	cpi	r24, 0x04	; 4
    1e18:	90 f5       	brcc	.+100    	; 0x1e7e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	3c 83       	std	Y+4, r19	; 0x04
    1e22:	2b 83       	std	Y+3, r18	; 0x03
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	d1 f0       	breq	.+52     	; 0x1e62 <GPIO_setupPortDirection+0x5e>
    1e2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e30:	3c 81       	ldd	r19, Y+4	; 0x04
    1e32:	22 30       	cpi	r18, 0x02	; 2
    1e34:	31 05       	cpc	r19, r1
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <GPIO_setupPortDirection+0x3e>
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <GPIO_setupPortDirection+0x54>
    1e40:	1e c0       	rjmp	.+60     	; 0x1e7e <GPIO_setupPortDirection+0x7a>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <GPIO_setupPortDirection+0x68>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	83 30       	cpi	r24, 0x03	; 3
    1e52:	91 05       	cpc	r25, r1
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <GPIO_setupPortDirection+0x72>
    1e56:	13 c0       	rjmp	.+38     	; 0x1e7e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e58:	ea e3       	ldi	r30, 0x3A	; 58
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	80 83       	st	Z, r24
    1e60:	0e c0       	rjmp	.+28     	; 0x1e7e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e62:	e7 e3       	ldi	r30, 0x37	; 55
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	80 83       	st	Z, r24
    1e6a:	09 c0       	rjmp	.+18     	; 0x1e7e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e6c:	e4 e3       	ldi	r30, 0x34	; 52
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	80 83       	st	Z, r24
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e76:	e1 e3       	ldi	r30, 0x31	; 49
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <GPIO_writePort+0x6>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <GPIO_writePort+0x8>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	84 30       	cpi	r24, 0x04	; 4
    1ea0:	90 f5       	brcc	.+100    	; 0x1f06 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	3c 83       	std	Y+4, r19	; 0x04
    1eaa:	2b 83       	std	Y+3, r18	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	d1 f0       	breq	.+52     	; 0x1eea <GPIO_writePort+0x5e>
    1eb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <GPIO_writePort+0x3e>
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	61 f0       	breq	.+24     	; 0x1ee0 <GPIO_writePort+0x54>
    1ec8:	1e c0       	rjmp	.+60     	; 0x1f06 <GPIO_writePort+0x7a>
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	81 f0       	breq	.+32     	; 0x1ef4 <GPIO_writePort+0x68>
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	83 30       	cpi	r24, 0x03	; 3
    1eda:	91 05       	cpc	r25, r1
    1edc:	81 f0       	breq	.+32     	; 0x1efe <GPIO_writePort+0x72>
    1ede:	13 c0       	rjmp	.+38     	; 0x1f06 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ee0:	eb e3       	ldi	r30, 0x3B	; 59
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	80 83       	st	Z, r24
    1ee8:	0e c0       	rjmp	.+28     	; 0x1f06 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1eea:	e8 e3       	ldi	r30, 0x38	; 56
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	80 83       	st	Z, r24
    1ef2:	09 c0       	rjmp	.+18     	; 0x1f06 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ef4:	e5 e3       	ldi	r30, 0x35	; 53
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	80 83       	st	Z, r24
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1efe:	e2 e3       	ldi	r30, 0x32	; 50
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <GPIO_readPort+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <GPIO_readPort+0x8>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f22:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	84 30       	cpi	r24, 0x04	; 4
    1f28:	90 f5       	brcc	.+100    	; 0x1f8e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	3c 83       	std	Y+4, r19	; 0x04
    1f32:	2b 83       	std	Y+3, r18	; 0x03
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	d1 f0       	breq	.+52     	; 0x1f72 <GPIO_readPort+0x5e>
    1f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f40:	3c 81       	ldd	r19, Y+4	; 0x04
    1f42:	22 30       	cpi	r18, 0x02	; 2
    1f44:	31 05       	cpc	r19, r1
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <GPIO_readPort+0x3e>
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	61 f0       	breq	.+24     	; 0x1f68 <GPIO_readPort+0x54>
    1f50:	1e c0       	rjmp	.+60     	; 0x1f8e <GPIO_readPort+0x7a>
    1f52:	2b 81       	ldd	r18, Y+3	; 0x03
    1f54:	3c 81       	ldd	r19, Y+4	; 0x04
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	81 f0       	breq	.+32     	; 0x1f7c <GPIO_readPort+0x68>
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	91 05       	cpc	r25, r1
    1f64:	81 f0       	breq	.+32     	; 0x1f86 <GPIO_readPort+0x72>
    1f66:	13 c0       	rjmp	.+38     	; 0x1f8e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f68:	e9 e3       	ldi	r30, 0x39	; 57
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	0e c0       	rjmp	.+28     	; 0x1f8e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f72:	e6 e3       	ldi	r30, 0x36	; 54
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	09 c0       	rjmp	.+18     	; 0x1f8e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f7c:	e3 e3       	ldi	r30, 0x33	; 51
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f86:	e0 e3       	ldi	r30, 0x30	; 48
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	2e 97       	sbiw	r28, 0x0e	; 14
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	61 e0       	ldi	r22, 0x01	; 1
    1fb6:	41 e0       	ldi	r20, 0x01	; 1
    1fb8:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	62 e0       	ldi	r22, 0x02	; 2
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 ea       	ldi	r26, 0xA0	; 160
    1fcc:	b1 e4       	ldi	r27, 0x41	; 65
    1fce:	8b 87       	std	Y+11, r24	; 0x0b
    1fd0:	9c 87       	std	Y+12, r25	; 0x0c
    1fd2:	ad 87       	std	Y+13, r26	; 0x0d
    1fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a e7       	ldi	r20, 0x7A	; 122
    1fe4:	55 e4       	ldi	r21, 0x45	; 69
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8f 83       	std	Y+7, r24	; 0x07
    1ff0:	98 87       	std	Y+8, r25	; 0x08
    1ff2:	a9 87       	std	Y+9, r26	; 0x09
    1ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <LCD_init+0x7a>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	6b 85       	ldd	r22, Y+11	; 0x0b
    2032:	7c 85       	ldd	r23, Y+12	; 0x0c
    2034:	8d 85       	ldd	r24, Y+13	; 0x0d
    2036:	9e 85       	ldd	r25, Y+14	; 0x0e
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9e 83       	std	Y+6, r25	; 0x06
    2056:	8d 83       	std	Y+5, r24	; 0x05
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <LCD_init+0xda>
    205a:	80 e9       	ldi	r24, 0x90	; 144
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9c 83       	std	Y+4, r25	; 0x04
    2060:	8b 83       	std	Y+3, r24	; 0x03
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_init+0xc8>
    206a:	9c 83       	std	Y+4, r25	; 0x04
    206c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <LCD_init+0xbc>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCD_init+0x104>
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	63 e0       	ldi	r22, 0x03	; 3
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	64 e0       	ldi	r22, 0x04	; 4
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	65 e0       	ldi	r22, 0x05	; 5
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	66 e0       	ldi	r22, 0x06	; 6
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    20d2:	83 e3       	ldi	r24, 0x33	; 51
    20d4:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    20d8:	82 e3       	ldi	r24, 0x32	; 50
    20da:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    20de:	88 e2       	ldi	r24, 0x28	; 40
    20e0:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20e4:	8c e0       	ldi	r24, 0x0C	; 12
    20e6:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_sendCommand>
}
    20f0:	2e 96       	adiw	r28, 0x0e	; 14
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	c3 56       	subi	r28, 0x63	; 99
    2110:	d0 40       	sbci	r29, 0x00	; 0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	fe 01       	movw	r30, r28
    211e:	ed 59       	subi	r30, 0x9D	; 157
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    212e:	fe 01       	movw	r30, r28
    2130:	e1 5a       	subi	r30, 0xA1	; 161
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e8       	ldi	r26, 0x80	; 128
    213a:	bf e3       	ldi	r27, 0x3F	; 63
    213c:	80 83       	st	Z, r24
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	a2 83       	std	Z+2, r26	; 0x02
    2142:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2144:	8e 01       	movw	r16, r28
    2146:	05 5a       	subi	r16, 0xA5	; 165
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	e1 5a       	subi	r30, 0xA1	; 161
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a e7       	ldi	r20, 0x7A	; 122
    215e:	55 e4       	ldi	r21, 0x45	; 69
    2160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	f8 01       	movw	r30, r16
    216a:	80 83       	st	Z, r24
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	a2 83       	std	Z+2, r26	; 0x02
    2170:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2172:	fe 01       	movw	r30, r28
    2174:	e5 5a       	subi	r30, 0xA5	; 165
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	44 f4       	brge	.+16     	; 0x21a0 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2190:	fe 01       	movw	r30, r28
    2192:	e7 5a       	subi	r30, 0xA7	; 167
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
    219e:	64 c0       	rjmp	.+200    	; 0x2268 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    21a0:	fe 01       	movw	r30, r28
    21a2:	e5 5a       	subi	r30, 0xA5	; 165
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	0c f0       	brlt	.+2      	; 0x21c0 <LCD_sendCommand+0xbe>
    21be:	43 c0       	rjmp	.+134    	; 0x2246 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	fe 01       	movw	r30, r28
    21c2:	e1 5a       	subi	r30, 0xA1	; 161
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8e 01       	movw	r16, r28
    21e0:	07 5a       	subi	r16, 0xA7	; 167
    21e2:	1f 4f       	sbci	r17, 0xFF	; 255
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	f8 01       	movw	r30, r16
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	1f c0       	rjmp	.+62     	; 0x2236 <LCD_sendCommand+0x134>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e9 5a       	subi	r30, 0xA9	; 169
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 e9       	ldi	r24, 0x90	; 144
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	fe 01       	movw	r30, r28
    2208:	e9 5a       	subi	r30, 0xA9	; 169
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_sendCommand+0x10e>
    2214:	fe 01       	movw	r30, r28
    2216:	e9 5a       	subi	r30, 0xA9	; 169
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221e:	de 01       	movw	r26, r28
    2220:	a7 5a       	subi	r26, 0xA7	; 167
    2222:	bf 4f       	sbci	r27, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e7 5a       	subi	r30, 0xA7	; 167
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	9c 93       	st	X, r25
    2234:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	fe 01       	movw	r30, r28
    2238:	e7 5a       	subi	r30, 0xA7	; 167
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	d1 f6       	brne	.-76     	; 0x21f8 <LCD_sendCommand+0xf6>
    2244:	27 c0       	rjmp	.+78     	; 0x2294 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	8e 01       	movw	r16, r28
    2248:	07 5a       	subi	r16, 0xA7	; 167
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	e5 5a       	subi	r30, 0xA5	; 165
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	f8 01       	movw	r30, r16
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	de 01       	movw	r26, r28
    226a:	ab 5a       	subi	r26, 0xAB	; 171
    226c:	bf 4f       	sbci	r27, 0xFF	; 255
    226e:	fe 01       	movw	r30, r28
    2270:	e7 5a       	subi	r30, 0xA7	; 167
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	8d 93       	st	X+, r24
    227a:	9c 93       	st	X, r25
    227c:	fe 01       	movw	r30, r28
    227e:	eb 5a       	subi	r30, 0xAB	; 171
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_sendCommand+0x184>
    228a:	fe 01       	movw	r30, r28
    228c:	eb 5a       	subi	r30, 0xAB	; 171
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	62 e0       	ldi	r22, 0x02	; 2
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    229e:	fe 01       	movw	r30, r28
    22a0:	ef 5a       	subi	r30, 0xAF	; 175
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e8       	ldi	r26, 0x80	; 128
    22aa:	bf e3       	ldi	r27, 0x3F	; 63
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	8e 01       	movw	r16, r28
    22b6:	03 5b       	subi	r16, 0xB3	; 179
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	fe 01       	movw	r30, r28
    22bc:	ef 5a       	subi	r30, 0xAF	; 175
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a e7       	ldi	r20, 0x7A	; 122
    22ce:	55 e4       	ldi	r21, 0x45	; 69
    22d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	f8 01       	movw	r30, r16
    22da:	80 83       	st	Z, r24
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	a2 83       	std	Z+2, r26	; 0x02
    22e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e3 5b       	subi	r30, 0xB3	; 179
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	44 f4       	brge	.+16     	; 0x2310 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2300:	fe 01       	movw	r30, r28
    2302:	e5 5b       	subi	r30, 0xB5	; 181
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
    230e:	64 c0       	rjmp	.+200    	; 0x23d8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2310:	fe 01       	movw	r30, r28
    2312:	e3 5b       	subi	r30, 0xB3	; 179
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	3f ef       	ldi	r19, 0xFF	; 255
    2322:	4f e7       	ldi	r20, 0x7F	; 127
    2324:	57 e4       	ldi	r21, 0x47	; 71
    2326:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    232a:	18 16       	cp	r1, r24
    232c:	0c f0       	brlt	.+2      	; 0x2330 <LCD_sendCommand+0x22e>
    232e:	43 c0       	rjmp	.+134    	; 0x23b6 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	fe 01       	movw	r30, r28
    2332:	ef 5a       	subi	r30, 0xAF	; 175
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	8e 01       	movw	r16, r28
    2350:	05 5b       	subi	r16, 0xB5	; 181
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	f8 01       	movw	r30, r16
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
    2366:	1f c0       	rjmp	.+62     	; 0x23a6 <LCD_sendCommand+0x2a4>
    2368:	fe 01       	movw	r30, r28
    236a:	e7 5b       	subi	r30, 0xB7	; 183
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 e9       	ldi	r24, 0x90	; 144
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
    2376:	fe 01       	movw	r30, r28
    2378:	e7 5b       	subi	r30, 0xB7	; 183
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_sendCommand+0x27e>
    2384:	fe 01       	movw	r30, r28
    2386:	e7 5b       	subi	r30, 0xB7	; 183
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	de 01       	movw	r26, r28
    2390:	a5 5b       	subi	r26, 0xB5	; 181
    2392:	bf 4f       	sbci	r27, 0xFF	; 255
    2394:	fe 01       	movw	r30, r28
    2396:	e5 5b       	subi	r30, 0xB5	; 181
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	91 81       	ldd	r25, Z+1	; 0x01
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	11 96       	adiw	r26, 0x01	; 1
    23a2:	9c 93       	st	X, r25
    23a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a6:	fe 01       	movw	r30, r28
    23a8:	e5 5b       	subi	r30, 0xB5	; 181
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	d1 f6       	brne	.-76     	; 0x2368 <LCD_sendCommand+0x266>
    23b4:	27 c0       	rjmp	.+78     	; 0x2404 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	8e 01       	movw	r16, r28
    23b8:	05 5b       	subi	r16, 0xB5	; 181
    23ba:	1f 4f       	sbci	r17, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	e3 5b       	subi	r30, 0xB3	; 179
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	f8 01       	movw	r30, r16
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    23d8:	de 01       	movw	r26, r28
    23da:	a9 5b       	subi	r26, 0xB9	; 185
    23dc:	bf 4f       	sbci	r27, 0xFF	; 255
    23de:	fe 01       	movw	r30, r28
    23e0:	e5 5b       	subi	r30, 0xB5	; 181
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	8d 93       	st	X+, r24
    23ea:	9c 93       	st	X, r25
    23ec:	fe 01       	movw	r30, r28
    23ee:	e9 5b       	subi	r30, 0xB9	; 185
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_sendCommand+0x2f4>
    23fa:	fe 01       	movw	r30, r28
    23fc:	e9 5b       	subi	r30, 0xB9	; 185
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2404:	fe 01       	movw	r30, r28
    2406:	ed 59       	subi	r30, 0x9D	; 157
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	80 71       	andi	r24, 0x10	; 16
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	95 95       	asr	r25
    2416:	87 95       	ror	r24
    2418:	95 95       	asr	r25
    241a:	87 95       	ror	r24
    241c:	95 95       	asr	r25
    241e:	87 95       	ror	r24
    2420:	95 95       	asr	r25
    2422:	87 95       	ror	r24
    2424:	98 2f       	mov	r25, r24
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	63 e0       	ldi	r22, 0x03	; 3
    242a:	49 2f       	mov	r20, r25
    242c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2430:	fe 01       	movw	r30, r28
    2432:	ed 59       	subi	r30, 0x9D	; 157
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	80 81       	ld	r24, Z
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	80 72       	andi	r24, 0x20	; 32
    243e:	90 70       	andi	r25, 0x00	; 0
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	95 95       	asr	r25
    2446:	87 95       	ror	r24
    2448:	95 95       	asr	r25
    244a:	87 95       	ror	r24
    244c:	95 95       	asr	r25
    244e:	87 95       	ror	r24
    2450:	95 95       	asr	r25
    2452:	87 95       	ror	r24
    2454:	98 2f       	mov	r25, r24
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	64 e0       	ldi	r22, 0x04	; 4
    245a:	49 2f       	mov	r20, r25
    245c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2460:	fe 01       	movw	r30, r28
    2462:	ed 59       	subi	r30, 0x9D	; 157
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 81       	ld	r24, Z
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	80 74       	andi	r24, 0x40	; 64
    246e:	90 70       	andi	r25, 0x00	; 0
    2470:	08 2e       	mov	r0, r24
    2472:	89 2f       	mov	r24, r25
    2474:	00 0c       	add	r0, r0
    2476:	88 1f       	adc	r24, r24
    2478:	99 0b       	sbc	r25, r25
    247a:	00 0c       	add	r0, r0
    247c:	88 1f       	adc	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	98 2f       	mov	r25, r24
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	65 e0       	ldi	r22, 0x05	; 5
    2486:	49 2f       	mov	r20, r25
    2488:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    248c:	fe 01       	movw	r30, r28
    248e:	ed 59       	subi	r30, 0x9D	; 157
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	98 2f       	mov	r25, r24
    2496:	99 1f       	adc	r25, r25
    2498:	99 27       	eor	r25, r25
    249a:	99 1f       	adc	r25, r25
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	66 e0       	ldi	r22, 0x06	; 6
    24a0:	49 2f       	mov	r20, r25
    24a2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    24a6:	fe 01       	movw	r30, r28
    24a8:	ed 5b       	subi	r30, 0xBD	; 189
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a0 e8       	ldi	r26, 0x80	; 128
    24b2:	bf e3       	ldi	r27, 0x3F	; 63
    24b4:	80 83       	st	Z, r24
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	a2 83       	std	Z+2, r26	; 0x02
    24ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	8e 01       	movw	r16, r28
    24be:	01 5c       	subi	r16, 0xC1	; 193
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	ed 5b       	subi	r30, 0xBD	; 189
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	4a e7       	ldi	r20, 0x7A	; 122
    24d6:	55 e4       	ldi	r21, 0x45	; 69
    24d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	80 83       	st	Z, r24
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	a2 83       	std	Z+2, r26	; 0x02
    24e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ea:	fe 01       	movw	r30, r28
    24ec:	ff 96       	adiw	r30, 0x3f	; 63
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9e af       	std	Y+62, r25	; 0x3e
    250c:	8d af       	std	Y+61, r24	; 0x3d
    250e:	46 c0       	rjmp	.+140    	; 0x259c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2510:	fe 01       	movw	r30, r28
    2512:	ff 96       	adiw	r30, 0x3f	; 63
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	3f ef       	ldi	r19, 0xFF	; 255
    2520:	4f e7       	ldi	r20, 0x7F	; 127
    2522:	57 e4       	ldi	r21, 0x47	; 71
    2524:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2528:	18 16       	cp	r1, r24
    252a:	64 f5       	brge	.+88     	; 0x2584 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	fe 01       	movw	r30, r28
    252e:	ed 5b       	subi	r30, 0xBD	; 189
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9e af       	std	Y+62, r25	; 0x3e
    2558:	8d af       	std	Y+61, r24	; 0x3d
    255a:	0f c0       	rjmp	.+30     	; 0x257a <LCD_sendCommand+0x478>
    255c:	80 e9       	ldi	r24, 0x90	; 144
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9c af       	std	Y+60, r25	; 0x3c
    2562:	8b af       	std	Y+59, r24	; 0x3b
    2564:	8b ad       	ldd	r24, Y+59	; 0x3b
    2566:	9c ad       	ldd	r25, Y+60	; 0x3c
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_sendCommand+0x466>
    256c:	9c af       	std	Y+60, r25	; 0x3c
    256e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8d ad       	ldd	r24, Y+61	; 0x3d
    2572:	9e ad       	ldd	r25, Y+62	; 0x3e
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9e af       	std	Y+62, r25	; 0x3e
    2578:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8d ad       	ldd	r24, Y+61	; 0x3d
    257c:	9e ad       	ldd	r25, Y+62	; 0x3e
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <LCD_sendCommand+0x45a>
    2582:	16 c0       	rjmp	.+44     	; 0x25b0 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	fe 01       	movw	r30, r28
    2586:	ff 96       	adiw	r30, 0x3f	; 63
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9e af       	std	Y+62, r25	; 0x3e
    259a:	8d af       	std	Y+61, r24	; 0x3d
    259c:	8d ad       	ldd	r24, Y+61	; 0x3d
    259e:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a0:	9a af       	std	Y+58, r25	; 0x3a
    25a2:	89 af       	std	Y+57, r24	; 0x39
    25a4:	89 ad       	ldd	r24, Y+57	; 0x39
    25a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_sendCommand+0x4a6>
    25ac:	9a af       	std	Y+58, r25	; 0x3a
    25ae:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	62 e0       	ldi	r22, 0x02	; 2
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a0 e8       	ldi	r26, 0x80	; 128
    25c0:	bf e3       	ldi	r27, 0x3F	; 63
    25c2:	8d ab       	std	Y+53, r24	; 0x35
    25c4:	9e ab       	std	Y+54, r25	; 0x36
    25c6:	af ab       	std	Y+55, r26	; 0x37
    25c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	6d a9       	ldd	r22, Y+53	; 0x35
    25cc:	7e a9       	ldd	r23, Y+54	; 0x36
    25ce:	8f a9       	ldd	r24, Y+55	; 0x37
    25d0:	98 ad       	ldd	r25, Y+56	; 0x38
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a e7       	ldi	r20, 0x7A	; 122
    25d8:	55 e4       	ldi	r21, 0x45	; 69
    25da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	89 ab       	std	Y+49, r24	; 0x31
    25e4:	9a ab       	std	Y+50, r25	; 0x32
    25e6:	ab ab       	std	Y+51, r26	; 0x33
    25e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25ea:	69 a9       	ldd	r22, Y+49	; 0x31
    25ec:	7a a9       	ldd	r23, Y+50	; 0x32
    25ee:	8b a9       	ldd	r24, Y+51	; 0x33
    25f0:	9c a9       	ldd	r25, Y+52	; 0x34
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <LCD_sendCommand+0x50a>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	98 ab       	std	Y+48, r25	; 0x30
    2608:	8f a7       	std	Y+47, r24	; 0x2f
    260a:	3f c0       	rjmp	.+126    	; 0x268a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    260c:	69 a9       	ldd	r22, Y+49	; 0x31
    260e:	7a a9       	ldd	r23, Y+50	; 0x32
    2610:	8b a9       	ldd	r24, Y+51	; 0x33
    2612:	9c a9       	ldd	r25, Y+52	; 0x34
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	6d a9       	ldd	r22, Y+53	; 0x35
    2626:	7e a9       	ldd	r23, Y+54	; 0x36
    2628:	8f a9       	ldd	r24, Y+55	; 0x37
    262a:	98 ad       	ldd	r25, Y+56	; 0x38
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	98 ab       	std	Y+48, r25	; 0x30
    264a:	8f a7       	std	Y+47, r24	; 0x2f
    264c:	0f c0       	rjmp	.+30     	; 0x266c <LCD_sendCommand+0x56a>
    264e:	80 e9       	ldi	r24, 0x90	; 144
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	9e a7       	std	Y+46, r25	; 0x2e
    2654:	8d a7       	std	Y+45, r24	; 0x2d
    2656:	8d a5       	ldd	r24, Y+45	; 0x2d
    2658:	9e a5       	ldd	r25, Y+46	; 0x2e
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <LCD_sendCommand+0x558>
    265e:	9e a7       	std	Y+46, r25	; 0x2e
    2660:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	98 ab       	std	Y+48, r25	; 0x30
    266a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	8f a5       	ldd	r24, Y+47	; 0x2f
    266e:	98 a9       	ldd	r25, Y+48	; 0x30
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <LCD_sendCommand+0x54c>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	69 a9       	ldd	r22, Y+49	; 0x31
    2678:	7a a9       	ldd	r23, Y+50	; 0x32
    267a:	8b a9       	ldd	r24, Y+51	; 0x33
    267c:	9c a9       	ldd	r25, Y+52	; 0x34
    267e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	98 ab       	std	Y+48, r25	; 0x30
    2688:	8f a7       	std	Y+47, r24	; 0x2f
    268a:	8f a5       	ldd	r24, Y+47	; 0x2f
    268c:	98 a9       	ldd	r25, Y+48	; 0x30
    268e:	9c a7       	std	Y+44, r25	; 0x2c
    2690:	8b a7       	std	Y+43, r24	; 0x2b
    2692:	8b a5       	ldd	r24, Y+43	; 0x2b
    2694:	9c a5       	ldd	r25, Y+44	; 0x2c
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <LCD_sendCommand+0x594>
    269a:	9c a7       	std	Y+44, r25	; 0x2c
    269c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	62 e0       	ldi	r22, 0x02	; 2
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e8       	ldi	r26, 0x80	; 128
    26ae:	bf e3       	ldi	r27, 0x3F	; 63
    26b0:	8f a3       	std	Y+39, r24	; 0x27
    26b2:	98 a7       	std	Y+40, r25	; 0x28
    26b4:	a9 a7       	std	Y+41, r26	; 0x29
    26b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	6f a1       	ldd	r22, Y+39	; 0x27
    26ba:	78 a5       	ldd	r23, Y+40	; 0x28
    26bc:	89 a5       	ldd	r24, Y+41	; 0x29
    26be:	9a a5       	ldd	r25, Y+42	; 0x2a
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a e7       	ldi	r20, 0x7A	; 122
    26c6:	55 e4       	ldi	r21, 0x45	; 69
    26c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8b a3       	std	Y+35, r24	; 0x23
    26d2:	9c a3       	std	Y+36, r25	; 0x24
    26d4:	ad a3       	std	Y+37, r26	; 0x25
    26d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26d8:	6b a1       	ldd	r22, Y+35	; 0x23
    26da:	7c a1       	ldd	r23, Y+36	; 0x24
    26dc:	8d a1       	ldd	r24, Y+37	; 0x25
    26de:	9e a1       	ldd	r25, Y+38	; 0x26
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <LCD_sendCommand+0x5f8>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9a a3       	std	Y+34, r25	; 0x22
    26f6:	89 a3       	std	Y+33, r24	; 0x21
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    26fa:	6b a1       	ldd	r22, Y+35	; 0x23
    26fc:	7c a1       	ldd	r23, Y+36	; 0x24
    26fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2700:	9e a1       	ldd	r25, Y+38	; 0x26
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	6f a1       	ldd	r22, Y+39	; 0x27
    2714:	78 a5       	ldd	r23, Y+40	; 0x28
    2716:	89 a5       	ldd	r24, Y+41	; 0x29
    2718:	9a a5       	ldd	r25, Y+42	; 0x2a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9a a3       	std	Y+34, r25	; 0x22
    2738:	89 a3       	std	Y+33, r24	; 0x21
    273a:	0f c0       	rjmp	.+30     	; 0x275a <LCD_sendCommand+0x658>
    273c:	80 e9       	ldi	r24, 0x90	; 144
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	98 a3       	std	Y+32, r25	; 0x20
    2742:	8f 8f       	std	Y+31, r24	; 0x1f
    2744:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2746:	98 a1       	ldd	r25, Y+32	; 0x20
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_sendCommand+0x646>
    274c:	98 a3       	std	Y+32, r25	; 0x20
    274e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	89 a1       	ldd	r24, Y+33	; 0x21
    2752:	9a a1       	ldd	r25, Y+34	; 0x22
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9a a3       	std	Y+34, r25	; 0x22
    2758:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	89 a1       	ldd	r24, Y+33	; 0x21
    275c:	9a a1       	ldd	r25, Y+34	; 0x22
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <LCD_sendCommand+0x63a>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6b a1       	ldd	r22, Y+35	; 0x23
    2766:	7c a1       	ldd	r23, Y+36	; 0x24
    2768:	8d a1       	ldd	r24, Y+37	; 0x25
    276a:	9e a1       	ldd	r25, Y+38	; 0x26
    276c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9a a3       	std	Y+34, r25	; 0x22
    2776:	89 a3       	std	Y+33, r24	; 0x21
    2778:	89 a1       	ldd	r24, Y+33	; 0x21
    277a:	9a a1       	ldd	r25, Y+34	; 0x22
    277c:	9e 8f       	std	Y+30, r25	; 0x1e
    277e:	8d 8f       	std	Y+29, r24	; 0x1d
    2780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2782:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_sendCommand+0x682>
    2788:	9e 8f       	std	Y+30, r25	; 0x1e
    278a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    278c:	fe 01       	movw	r30, r28
    278e:	ed 59       	subi	r30, 0x9D	; 157
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	98 2f       	mov	r25, r24
    2796:	91 70       	andi	r25, 0x01	; 1
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	63 e0       	ldi	r22, 0x03	; 3
    279c:	49 2f       	mov	r20, r25
    279e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    27a2:	fe 01       	movw	r30, r28
    27a4:	ed 59       	subi	r30, 0x9D	; 157
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	82 70       	andi	r24, 0x02	; 2
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	95 95       	asr	r25
    27b4:	87 95       	ror	r24
    27b6:	98 2f       	mov	r25, r24
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	64 e0       	ldi	r22, 0x04	; 4
    27bc:	49 2f       	mov	r20, r25
    27be:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    27c2:	fe 01       	movw	r30, r28
    27c4:	ed 59       	subi	r30, 0x9D	; 157
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	88 2f       	mov	r24, r24
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	84 70       	andi	r24, 0x04	; 4
    27d0:	90 70       	andi	r25, 0x00	; 0
    27d2:	95 95       	asr	r25
    27d4:	87 95       	ror	r24
    27d6:	95 95       	asr	r25
    27d8:	87 95       	ror	r24
    27da:	98 2f       	mov	r25, r24
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	65 e0       	ldi	r22, 0x05	; 5
    27e0:	49 2f       	mov	r20, r25
    27e2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    27e6:	fe 01       	movw	r30, r28
    27e8:	ed 59       	subi	r30, 0x9D	; 157
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	88 2f       	mov	r24, r24
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	88 70       	andi	r24, 0x08	; 8
    27f4:	90 70       	andi	r25, 0x00	; 0
    27f6:	95 95       	asr	r25
    27f8:	87 95       	ror	r24
    27fa:	95 95       	asr	r25
    27fc:	87 95       	ror	r24
    27fe:	95 95       	asr	r25
    2800:	87 95       	ror	r24
    2802:	98 2f       	mov	r25, r24
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	66 e0       	ldi	r22, 0x06	; 6
    2808:	49 2f       	mov	r20, r25
    280a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	a0 e8       	ldi	r26, 0x80	; 128
    2814:	bf e3       	ldi	r27, 0x3F	; 63
    2816:	89 8f       	std	Y+25, r24	; 0x19
    2818:	9a 8f       	std	Y+26, r25	; 0x1a
    281a:	ab 8f       	std	Y+27, r26	; 0x1b
    281c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281e:	69 8d       	ldd	r22, Y+25	; 0x19
    2820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a e7       	ldi	r20, 0x7A	; 122
    282c:	55 e4       	ldi	r21, 0x45	; 69
    282e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	8d 8b       	std	Y+21, r24	; 0x15
    2838:	9e 8b       	std	Y+22, r25	; 0x16
    283a:	af 8b       	std	Y+23, r26	; 0x17
    283c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    283e:	6d 89       	ldd	r22, Y+21	; 0x15
    2840:	7e 89       	ldd	r23, Y+22	; 0x16
    2842:	8f 89       	ldd	r24, Y+23	; 0x17
    2844:	98 8d       	ldd	r25, Y+24	; 0x18
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2852:	88 23       	and	r24, r24
    2854:	2c f4       	brge	.+10     	; 0x2860 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9c 8b       	std	Y+20, r25	; 0x14
    285c:	8b 8b       	std	Y+19, r24	; 0x13
    285e:	3f c0       	rjmp	.+126    	; 0x28de <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2860:	6d 89       	ldd	r22, Y+21	; 0x15
    2862:	7e 89       	ldd	r23, Y+22	; 0x16
    2864:	8f 89       	ldd	r24, Y+23	; 0x17
    2866:	98 8d       	ldd	r25, Y+24	; 0x18
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	3f ef       	ldi	r19, 0xFF	; 255
    286c:	4f e7       	ldi	r20, 0x7F	; 127
    286e:	57 e4       	ldi	r21, 0x47	; 71
    2870:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2874:	18 16       	cp	r1, r24
    2876:	4c f5       	brge	.+82     	; 0x28ca <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	69 8d       	ldd	r22, Y+25	; 0x19
    287a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    287c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9c 8b       	std	Y+20, r25	; 0x14
    289e:	8b 8b       	std	Y+19, r24	; 0x13
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <LCD_sendCommand+0x7be>
    28a2:	80 e9       	ldi	r24, 0x90	; 144
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	9a 8b       	std	Y+18, r25	; 0x12
    28a8:	89 8b       	std	Y+17, r24	; 0x11
    28aa:	89 89       	ldd	r24, Y+17	; 0x11
    28ac:	9a 89       	ldd	r25, Y+18	; 0x12
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_sendCommand+0x7ac>
    28b2:	9a 8b       	std	Y+18, r25	; 0x12
    28b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8b 89       	ldd	r24, Y+19	; 0x13
    28b8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9c 8b       	std	Y+20, r25	; 0x14
    28be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8b 89       	ldd	r24, Y+19	; 0x13
    28c2:	9c 89       	ldd	r25, Y+20	; 0x14
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <LCD_sendCommand+0x7a0>
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	6d 89       	ldd	r22, Y+21	; 0x15
    28cc:	7e 89       	ldd	r23, Y+22	; 0x16
    28ce:	8f 89       	ldd	r24, Y+23	; 0x17
    28d0:	98 8d       	ldd	r25, Y+24	; 0x18
    28d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9c 8b       	std	Y+20, r25	; 0x14
    28dc:	8b 8b       	std	Y+19, r24	; 0x13
    28de:	8b 89       	ldd	r24, Y+19	; 0x13
    28e0:	9c 89       	ldd	r25, Y+20	; 0x14
    28e2:	98 8b       	std	Y+16, r25	; 0x10
    28e4:	8f 87       	std	Y+15, r24	; 0x0f
    28e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e8:	98 89       	ldd	r25, Y+16	; 0x10
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_sendCommand+0x7e8>
    28ee:	98 8b       	std	Y+16, r25	; 0x10
    28f0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	62 e0       	ldi	r22, 0x02	; 2
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e8       	ldi	r26, 0x80	; 128
    2902:	bf e3       	ldi	r27, 0x3F	; 63
    2904:	8b 87       	std	Y+11, r24	; 0x0b
    2906:	9c 87       	std	Y+12, r25	; 0x0c
    2908:	ad 87       	std	Y+13, r26	; 0x0d
    290a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6b 85       	ldd	r22, Y+11	; 0x0b
    290e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2910:	8d 85       	ldd	r24, Y+13	; 0x0d
    2912:	9e 85       	ldd	r25, Y+14	; 0x0e
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a e7       	ldi	r20, 0x7A	; 122
    291a:	55 e4       	ldi	r21, 0x45	; 69
    291c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8f 83       	std	Y+7, r24	; 0x07
    2926:	98 87       	std	Y+8, r25	; 0x08
    2928:	a9 87       	std	Y+9, r26	; 0x09
    292a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <LCD_sendCommand+0x84c>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6b 85       	ldd	r22, Y+11	; 0x0b
    2968:	7c 85       	ldd	r23, Y+12	; 0x0c
    296a:	8d 85       	ldd	r24, Y+13	; 0x0d
    296c:	9e 85       	ldd	r25, Y+14	; 0x0e
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <LCD_sendCommand+0x8ac>
    2990:	80 e9       	ldi	r24, 0x90	; 144
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	9c 83       	std	Y+4, r25	; 0x04
    2996:	8b 83       	std	Y+3, r24	; 0x03
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <LCD_sendCommand+0x89a>
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <LCD_sendCommand+0x88e>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_sendCommand+0x8d6>
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29e0:	cd 59       	subi	r28, 0x9D	; 157
    29e2:	df 4f       	sbci	r29, 0xFF	; 255
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	08 95       	ret

000029f8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	c3 56       	subi	r28, 0x63	; 99
    2a06:	d0 40       	sbci	r29, 0x00	; 0
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	fe 01       	movw	r30, r28
    2a14:	ed 59       	subi	r30, 0x9D	; 157
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	61 e0       	ldi	r22, 0x01	; 1
    2a1e:	41 e0       	ldi	r20, 0x01	; 1
    2a20:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    2a24:	fe 01       	movw	r30, r28
    2a26:	e1 5a       	subi	r30, 0xA1	; 161
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a0 e8       	ldi	r26, 0x80	; 128
    2a30:	bf e3       	ldi	r27, 0x3F	; 63
    2a32:	80 83       	st	Z, r24
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	a2 83       	std	Z+2, r26	; 0x02
    2a38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3a:	8e 01       	movw	r16, r28
    2a3c:	05 5a       	subi	r16, 0xA5	; 165
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	fe 01       	movw	r30, r28
    2a42:	e1 5a       	subi	r30, 0xA1	; 161
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	60 81       	ld	r22, Z
    2a48:	71 81       	ldd	r23, Z+1	; 0x01
    2a4a:	82 81       	ldd	r24, Z+2	; 0x02
    2a4c:	93 81       	ldd	r25, Z+3	; 0x03
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a e7       	ldi	r20, 0x7A	; 122
    2a54:	55 e4       	ldi	r21, 0x45	; 69
    2a56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	f8 01       	movw	r30, r16
    2a60:	80 83       	st	Z, r24
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	a2 83       	std	Z+2, r26	; 0x02
    2a66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e5 5a       	subi	r30, 0xA5	; 165
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	44 f4       	brge	.+16     	; 0x2a96 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2a86:	fe 01       	movw	r30, r28
    2a88:	e7 5a       	subi	r30, 0xA7	; 167
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
    2a94:	64 c0       	rjmp	.+200    	; 0x2b5e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2a96:	fe 01       	movw	r30, r28
    2a98:	e5 5a       	subi	r30, 0xA5	; 165
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	0c f0       	brlt	.+2      	; 0x2ab6 <LCD_displayCharacter+0xbe>
    2ab4:	43 c0       	rjmp	.+134    	; 0x2b3c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e1 5a       	subi	r30, 0xA1	; 161
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8e 01       	movw	r16, r28
    2ad6:	07 5a       	subi	r16, 0xA7	; 167
    2ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
    2aec:	1f c0       	rjmp	.+62     	; 0x2b2c <LCD_displayCharacter+0x134>
    2aee:	fe 01       	movw	r30, r28
    2af0:	e9 5a       	subi	r30, 0xA9	; 169
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	80 e9       	ldi	r24, 0x90	; 144
    2af6:	91 e0       	ldi	r25, 0x01	; 1
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
    2afc:	fe 01       	movw	r30, r28
    2afe:	e9 5a       	subi	r30, 0xA9	; 169
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD_displayCharacter+0x10e>
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e9 5a       	subi	r30, 0xA9	; 169
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	de 01       	movw	r26, r28
    2b16:	a7 5a       	subi	r26, 0xA7	; 167
    2b18:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e7 5a       	subi	r30, 0xA7	; 167
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	11 96       	adiw	r26, 0x01	; 1
    2b28:	9c 93       	st	X, r25
    2b2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e7 5a       	subi	r30, 0xA7	; 167
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	d1 f6       	brne	.-76     	; 0x2aee <LCD_displayCharacter+0xf6>
    2b3a:	27 c0       	rjmp	.+78     	; 0x2b8a <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3c:	8e 01       	movw	r16, r28
    2b3e:	07 5a       	subi	r16, 0xA7	; 167
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
    2b42:	fe 01       	movw	r30, r28
    2b44:	e5 5a       	subi	r30, 0xA5	; 165
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	f8 01       	movw	r30, r16
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	de 01       	movw	r26, r28
    2b60:	ab 5a       	subi	r26, 0xAB	; 171
    2b62:	bf 4f       	sbci	r27, 0xFF	; 255
    2b64:	fe 01       	movw	r30, r28
    2b66:	e7 5a       	subi	r30, 0xA7	; 167
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	8d 93       	st	X+, r24
    2b70:	9c 93       	st	X, r25
    2b72:	fe 01       	movw	r30, r28
    2b74:	eb 5a       	subi	r30, 0xAB	; 171
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_displayCharacter+0x184>
    2b80:	fe 01       	movw	r30, r28
    2b82:	eb 5a       	subi	r30, 0xAB	; 171
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    2b94:	fe 01       	movw	r30, r28
    2b96:	ef 5a       	subi	r30, 0xAF	; 175
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	a0 e8       	ldi	r26, 0x80	; 128
    2ba0:	bf e3       	ldi	r27, 0x3F	; 63
    2ba2:	80 83       	st	Z, r24
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	a2 83       	std	Z+2, r26	; 0x02
    2ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2baa:	8e 01       	movw	r16, r28
    2bac:	03 5b       	subi	r16, 0xB3	; 179
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	ef 5a       	subi	r30, 0xAF	; 175
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	60 81       	ld	r22, Z
    2bb8:	71 81       	ldd	r23, Z+1	; 0x01
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	4a e7       	ldi	r20, 0x7A	; 122
    2bc4:	55 e4       	ldi	r21, 0x45	; 69
    2bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	f8 01       	movw	r30, r16
    2bd0:	80 83       	st	Z, r24
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	a2 83       	std	Z+2, r26	; 0x02
    2bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e3 5b       	subi	r30, 0xB3	; 179
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e8       	ldi	r20, 0x80	; 128
    2bec:	5f e3       	ldi	r21, 0x3F	; 63
    2bee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bf2:	88 23       	and	r24, r24
    2bf4:	44 f4       	brge	.+16     	; 0x2c06 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e5 5b       	subi	r30, 0xB5	; 181
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	80 83       	st	Z, r24
    2c04:	64 c0       	rjmp	.+200    	; 0x2cce <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2c06:	fe 01       	movw	r30, r28
    2c08:	e3 5b       	subi	r30, 0xB3	; 179
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	60 81       	ld	r22, Z
    2c0e:	71 81       	ldd	r23, Z+1	; 0x01
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	0c f0       	brlt	.+2      	; 0x2c26 <LCD_displayCharacter+0x22e>
    2c24:	43 c0       	rjmp	.+134    	; 0x2cac <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c26:	fe 01       	movw	r30, r28
    2c28:	ef 5a       	subi	r30, 0xAF	; 175
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e2       	ldi	r20, 0x20	; 32
    2c3a:	51 e4       	ldi	r21, 0x41	; 65
    2c3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	8e 01       	movw	r16, r28
    2c46:	05 5b       	subi	r16, 0xB5	; 181
    2c48:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	f8 01       	movw	r30, r16
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	80 83       	st	Z, r24
    2c5c:	1f c0       	rjmp	.+62     	; 0x2c9c <LCD_displayCharacter+0x2a4>
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e7 5b       	subi	r30, 0xB7	; 183
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 e9       	ldi	r24, 0x90	; 144
    2c66:	91 e0       	ldi	r25, 0x01	; 1
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e7 5b       	subi	r30, 0xB7	; 183
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	80 81       	ld	r24, Z
    2c74:	91 81       	ldd	r25, Z+1	; 0x01
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <LCD_displayCharacter+0x27e>
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e7 5b       	subi	r30, 0xB7	; 183
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c84:	de 01       	movw	r26, r28
    2c86:	a5 5b       	subi	r26, 0xB5	; 181
    2c88:	bf 4f       	sbci	r27, 0xFF	; 255
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e5 5b       	subi	r30, 0xB5	; 181
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	91 81       	ldd	r25, Z+1	; 0x01
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	11 96       	adiw	r26, 0x01	; 1
    2c98:	9c 93       	st	X, r25
    2c9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e5 5b       	subi	r30, 0xB5	; 181
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	d1 f6       	brne	.-76     	; 0x2c5e <LCD_displayCharacter+0x266>
    2caa:	27 c0       	rjmp	.+78     	; 0x2cfa <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	8e 01       	movw	r16, r28
    2cae:	05 5b       	subi	r16, 0xB5	; 181
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e3 5b       	subi	r30, 0xB3	; 179
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24
    2cce:	de 01       	movw	r26, r28
    2cd0:	a9 5b       	subi	r26, 0xB9	; 185
    2cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e5 5b       	subi	r30, 0xB5	; 181
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	8d 93       	st	X+, r24
    2ce0:	9c 93       	st	X, r25
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e9 5b       	subi	r30, 0xB9	; 185
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_displayCharacter+0x2f4>
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e9 5b       	subi	r30, 0xB9	; 185
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ed 59       	subi	r30, 0x9D	; 157
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	88 2f       	mov	r24, r24
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	80 71       	andi	r24, 0x10	; 16
    2d08:	90 70       	andi	r25, 0x00	; 0
    2d0a:	95 95       	asr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	95 95       	asr	r25
    2d10:	87 95       	ror	r24
    2d12:	95 95       	asr	r25
    2d14:	87 95       	ror	r24
    2d16:	95 95       	asr	r25
    2d18:	87 95       	ror	r24
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	63 e0       	ldi	r22, 0x03	; 3
    2d20:	49 2f       	mov	r20, r25
    2d22:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2d26:	fe 01       	movw	r30, r28
    2d28:	ed 59       	subi	r30, 0x9D	; 157
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 2f       	mov	r24, r24
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	80 72       	andi	r24, 0x20	; 32
    2d34:	90 70       	andi	r25, 0x00	; 0
    2d36:	95 95       	asr	r25
    2d38:	87 95       	ror	r24
    2d3a:	95 95       	asr	r25
    2d3c:	87 95       	ror	r24
    2d3e:	95 95       	asr	r25
    2d40:	87 95       	ror	r24
    2d42:	95 95       	asr	r25
    2d44:	87 95       	ror	r24
    2d46:	95 95       	asr	r25
    2d48:	87 95       	ror	r24
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	64 e0       	ldi	r22, 0x04	; 4
    2d50:	49 2f       	mov	r20, r25
    2d52:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2d56:	fe 01       	movw	r30, r28
    2d58:	ed 59       	subi	r30, 0x9D	; 157
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 2f       	mov	r24, r24
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	80 74       	andi	r24, 0x40	; 64
    2d64:	90 70       	andi	r25, 0x00	; 0
    2d66:	08 2e       	mov	r0, r24
    2d68:	89 2f       	mov	r24, r25
    2d6a:	00 0c       	add	r0, r0
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 0b       	sbc	r25, r25
    2d70:	00 0c       	add	r0, r0
    2d72:	88 1f       	adc	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	98 2f       	mov	r25, r24
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	65 e0       	ldi	r22, 0x05	; 5
    2d7c:	49 2f       	mov	r20, r25
    2d7e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2d82:	fe 01       	movw	r30, r28
    2d84:	ed 59       	subi	r30, 0x9D	; 157
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	98 2f       	mov	r25, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	99 27       	eor	r25, r25
    2d90:	99 1f       	adc	r25, r25
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	66 e0       	ldi	r22, 0x06	; 6
    2d96:	49 2f       	mov	r20, r25
    2d98:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ed 5b       	subi	r30, 0xBD	; 189
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	a0 e8       	ldi	r26, 0x80	; 128
    2da8:	bf e3       	ldi	r27, 0x3F	; 63
    2daa:	80 83       	st	Z, r24
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	a2 83       	std	Z+2, r26	; 0x02
    2db0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db2:	8e 01       	movw	r16, r28
    2db4:	01 5c       	subi	r16, 0xC1	; 193
    2db6:	1f 4f       	sbci	r17, 0xFF	; 255
    2db8:	fe 01       	movw	r30, r28
    2dba:	ed 5b       	subi	r30, 0xBD	; 189
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4a e7       	ldi	r20, 0x7A	; 122
    2dcc:	55 e4       	ldi	r21, 0x45	; 69
    2dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	80 83       	st	Z, r24
    2dda:	91 83       	std	Z+1, r25	; 0x01
    2ddc:	a2 83       	std	Z+2, r26	; 0x02
    2dde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2de0:	fe 01       	movw	r30, r28
    2de2:	ff 96       	adiw	r30, 0x3f	; 63
    2de4:	60 81       	ld	r22, Z
    2de6:	71 81       	ldd	r23, Z+1	; 0x01
    2de8:	82 81       	ldd	r24, Z+2	; 0x02
    2dea:	93 81       	ldd	r25, Z+3	; 0x03
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e8       	ldi	r20, 0x80	; 128
    2df2:	5f e3       	ldi	r21, 0x3F	; 63
    2df4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2df8:	88 23       	and	r24, r24
    2dfa:	2c f4       	brge	.+10     	; 0x2e06 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9e af       	std	Y+62, r25	; 0x3e
    2e02:	8d af       	std	Y+61, r24	; 0x3d
    2e04:	46 c0       	rjmp	.+140    	; 0x2e92 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2e06:	fe 01       	movw	r30, r28
    2e08:	ff 96       	adiw	r30, 0x3f	; 63
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	64 f5       	brge	.+88     	; 0x2e7a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	fe 01       	movw	r30, r28
    2e24:	ed 5b       	subi	r30, 0xBD	; 189
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	60 81       	ld	r22, Z
    2e2a:	71 81       	ldd	r23, Z+1	; 0x01
    2e2c:	82 81       	ldd	r24, Z+2	; 0x02
    2e2e:	93 81       	ldd	r25, Z+3	; 0x03
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e2       	ldi	r20, 0x20	; 32
    2e36:	51 e4       	ldi	r21, 0x41	; 65
    2e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9e af       	std	Y+62, r25	; 0x3e
    2e4e:	8d af       	std	Y+61, r24	; 0x3d
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <LCD_displayCharacter+0x478>
    2e52:	80 e9       	ldi	r24, 0x90	; 144
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	9c af       	std	Y+60, r25	; 0x3c
    2e58:	8b af       	std	Y+59, r24	; 0x3b
    2e5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_displayCharacter+0x466>
    2e62:	9c af       	std	Y+60, r25	; 0x3c
    2e64:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e66:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e68:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	9e af       	std	Y+62, r25	; 0x3e
    2e6e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e70:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e72:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	69 f7       	brne	.-38     	; 0x2e52 <LCD_displayCharacter+0x45a>
    2e78:	16 c0       	rjmp	.+44     	; 0x2ea6 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	ff 96       	adiw	r30, 0x3f	; 63
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	9e af       	std	Y+62, r25	; 0x3e
    2e90:	8d af       	std	Y+61, r24	; 0x3d
    2e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e94:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e96:	9a af       	std	Y+58, r25	; 0x3a
    2e98:	89 af       	std	Y+57, r24	; 0x39
    2e9a:	89 ad       	ldd	r24, Y+57	; 0x39
    2e9c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <LCD_displayCharacter+0x4a6>
    2ea2:	9a af       	std	Y+58, r25	; 0x3a
    2ea4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	62 e0       	ldi	r22, 0x02	; 2
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	a0 e8       	ldi	r26, 0x80	; 128
    2eb6:	bf e3       	ldi	r27, 0x3F	; 63
    2eb8:	8d ab       	std	Y+53, r24	; 0x35
    2eba:	9e ab       	std	Y+54, r25	; 0x36
    2ebc:	af ab       	std	Y+55, r26	; 0x37
    2ebe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	4a e7       	ldi	r20, 0x7A	; 122
    2ece:	55 e4       	ldi	r21, 0x45	; 69
    2ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	89 ab       	std	Y+49, r24	; 0x31
    2eda:	9a ab       	std	Y+50, r25	; 0x32
    2edc:	ab ab       	std	Y+51, r26	; 0x33
    2ede:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e8       	ldi	r20, 0x80	; 128
    2eee:	5f e3       	ldi	r21, 0x3F	; 63
    2ef0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ef4:	88 23       	and	r24, r24
    2ef6:	2c f4       	brge	.+10     	; 0x2f02 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	98 ab       	std	Y+48, r25	; 0x30
    2efe:	8f a7       	std	Y+47, r24	; 0x2f
    2f00:	3f c0       	rjmp	.+126    	; 0x2f80 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2f02:	69 a9       	ldd	r22, Y+49	; 0x31
    2f04:	7a a9       	ldd	r23, Y+50	; 0x32
    2f06:	8b a9       	ldd	r24, Y+51	; 0x33
    2f08:	9c a9       	ldd	r25, Y+52	; 0x34
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	3f ef       	ldi	r19, 0xFF	; 255
    2f0e:	4f e7       	ldi	r20, 0x7F	; 127
    2f10:	57 e4       	ldi	r21, 0x47	; 71
    2f12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f16:	18 16       	cp	r1, r24
    2f18:	4c f5       	brge	.+82     	; 0x2f6c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f20:	98 ad       	ldd	r25, Y+56	; 0x38
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e2       	ldi	r20, 0x20	; 32
    2f28:	51 e4       	ldi	r21, 0x41	; 65
    2f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	98 ab       	std	Y+48, r25	; 0x30
    2f40:	8f a7       	std	Y+47, r24	; 0x2f
    2f42:	0f c0       	rjmp	.+30     	; 0x2f62 <LCD_displayCharacter+0x56a>
    2f44:	80 e9       	ldi	r24, 0x90	; 144
    2f46:	91 e0       	ldi	r25, 0x01	; 1
    2f48:	9e a7       	std	Y+46, r25	; 0x2e
    2f4a:	8d a7       	std	Y+45, r24	; 0x2d
    2f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <LCD_displayCharacter+0x558>
    2f54:	9e a7       	std	Y+46, r25	; 0x2e
    2f56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	98 ab       	std	Y+48, r25	; 0x30
    2f60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f64:	98 a9       	ldd	r25, Y+48	; 0x30
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	69 f7       	brne	.-38     	; 0x2f44 <LCD_displayCharacter+0x54c>
    2f6a:	14 c0       	rjmp	.+40     	; 0x2f94 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f70:	8b a9       	ldd	r24, Y+51	; 0x33
    2f72:	9c a9       	ldd	r25, Y+52	; 0x34
    2f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	98 ab       	std	Y+48, r25	; 0x30
    2f7e:	8f a7       	std	Y+47, r24	; 0x2f
    2f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f82:	98 a9       	ldd	r25, Y+48	; 0x30
    2f84:	9c a7       	std	Y+44, r25	; 0x2c
    2f86:	8b a7       	std	Y+43, r24	; 0x2b
    2f88:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <LCD_displayCharacter+0x594>
    2f90:	9c a7       	std	Y+44, r25	; 0x2c
    2f92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	62 e0       	ldi	r22, 0x02	; 2
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	a0 e8       	ldi	r26, 0x80	; 128
    2fa4:	bf e3       	ldi	r27, 0x3F	; 63
    2fa6:	8f a3       	std	Y+39, r24	; 0x27
    2fa8:	98 a7       	std	Y+40, r25	; 0x28
    2faa:	a9 a7       	std	Y+41, r26	; 0x29
    2fac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fae:	6f a1       	ldd	r22, Y+39	; 0x27
    2fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	4a e7       	ldi	r20, 0x7A	; 122
    2fbc:	55 e4       	ldi	r21, 0x45	; 69
    2fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	8b a3       	std	Y+35, r24	; 0x23
    2fc8:	9c a3       	std	Y+36, r25	; 0x24
    2fca:	ad a3       	std	Y+37, r26	; 0x25
    2fcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fce:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	5f e3       	ldi	r21, 0x3F	; 63
    2fde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fe2:	88 23       	and	r24, r24
    2fe4:	2c f4       	brge	.+10     	; 0x2ff0 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9a a3       	std	Y+34, r25	; 0x22
    2fec:	89 a3       	std	Y+33, r24	; 0x21
    2fee:	3f c0       	rjmp	.+126    	; 0x306e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	3f ef       	ldi	r19, 0xFF	; 255
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	57 e4       	ldi	r21, 0x47	; 71
    3000:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	4c f5       	brge	.+82     	; 0x305a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3008:	6f a1       	ldd	r22, Y+39	; 0x27
    300a:	78 a5       	ldd	r23, Y+40	; 0x28
    300c:	89 a5       	ldd	r24, Y+41	; 0x29
    300e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e2       	ldi	r20, 0x20	; 32
    3016:	51 e4       	ldi	r21, 0x41	; 65
    3018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9a a3       	std	Y+34, r25	; 0x22
    302e:	89 a3       	std	Y+33, r24	; 0x21
    3030:	0f c0       	rjmp	.+30     	; 0x3050 <LCD_displayCharacter+0x658>
    3032:	80 e9       	ldi	r24, 0x90	; 144
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	98 a3       	std	Y+32, r25	; 0x20
    3038:	8f 8f       	std	Y+31, r24	; 0x1f
    303a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    303c:	98 a1       	ldd	r25, Y+32	; 0x20
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <LCD_displayCharacter+0x646>
    3042:	98 a3       	std	Y+32, r25	; 0x20
    3044:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3046:	89 a1       	ldd	r24, Y+33	; 0x21
    3048:	9a a1       	ldd	r25, Y+34	; 0x22
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	9a a3       	std	Y+34, r25	; 0x22
    304e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3050:	89 a1       	ldd	r24, Y+33	; 0x21
    3052:	9a a1       	ldd	r25, Y+34	; 0x22
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	69 f7       	brne	.-38     	; 0x3032 <LCD_displayCharacter+0x63a>
    3058:	14 c0       	rjmp	.+40     	; 0x3082 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305a:	6b a1       	ldd	r22, Y+35	; 0x23
    305c:	7c a1       	ldd	r23, Y+36	; 0x24
    305e:	8d a1       	ldd	r24, Y+37	; 0x25
    3060:	9e a1       	ldd	r25, Y+38	; 0x26
    3062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9a a3       	std	Y+34, r25	; 0x22
    306c:	89 a3       	std	Y+33, r24	; 0x21
    306e:	89 a1       	ldd	r24, Y+33	; 0x21
    3070:	9a a1       	ldd	r25, Y+34	; 0x22
    3072:	9e 8f       	std	Y+30, r25	; 0x1e
    3074:	8d 8f       	std	Y+29, r24	; 0x1d
    3076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <LCD_displayCharacter+0x682>
    307e:	9e 8f       	std	Y+30, r25	; 0x1e
    3080:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3082:	fe 01       	movw	r30, r28
    3084:	ed 59       	subi	r30, 0x9D	; 157
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	98 2f       	mov	r25, r24
    308c:	91 70       	andi	r25, 0x01	; 1
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	63 e0       	ldi	r22, 0x03	; 3
    3092:	49 2f       	mov	r20, r25
    3094:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3098:	fe 01       	movw	r30, r28
    309a:	ed 59       	subi	r30, 0x9D	; 157
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	88 2f       	mov	r24, r24
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	82 70       	andi	r24, 0x02	; 2
    30a6:	90 70       	andi	r25, 0x00	; 0
    30a8:	95 95       	asr	r25
    30aa:	87 95       	ror	r24
    30ac:	98 2f       	mov	r25, r24
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	64 e0       	ldi	r22, 0x04	; 4
    30b2:	49 2f       	mov	r20, r25
    30b4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    30b8:	fe 01       	movw	r30, r28
    30ba:	ed 59       	subi	r30, 0x9D	; 157
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 81       	ld	r24, Z
    30c0:	88 2f       	mov	r24, r24
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	84 70       	andi	r24, 0x04	; 4
    30c6:	90 70       	andi	r25, 0x00	; 0
    30c8:	95 95       	asr	r25
    30ca:	87 95       	ror	r24
    30cc:	95 95       	asr	r25
    30ce:	87 95       	ror	r24
    30d0:	98 2f       	mov	r25, r24
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	65 e0       	ldi	r22, 0x05	; 5
    30d6:	49 2f       	mov	r20, r25
    30d8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    30dc:	fe 01       	movw	r30, r28
    30de:	ed 59       	subi	r30, 0x9D	; 157
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	88 70       	andi	r24, 0x08	; 8
    30ea:	90 70       	andi	r25, 0x00	; 0
    30ec:	95 95       	asr	r25
    30ee:	87 95       	ror	r24
    30f0:	95 95       	asr	r25
    30f2:	87 95       	ror	r24
    30f4:	95 95       	asr	r25
    30f6:	87 95       	ror	r24
    30f8:	98 2f       	mov	r25, r24
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	66 e0       	ldi	r22, 0x06	; 6
    30fe:	49 2f       	mov	r20, r25
    3100:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	a0 e8       	ldi	r26, 0x80	; 128
    310a:	bf e3       	ldi	r27, 0x3F	; 63
    310c:	89 8f       	std	Y+25, r24	; 0x19
    310e:	9a 8f       	std	Y+26, r25	; 0x1a
    3110:	ab 8f       	std	Y+27, r26	; 0x1b
    3112:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3114:	69 8d       	ldd	r22, Y+25	; 0x19
    3116:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3118:	8b 8d       	ldd	r24, Y+27	; 0x1b
    311a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	4a e7       	ldi	r20, 0x7A	; 122
    3122:	55 e4       	ldi	r21, 0x45	; 69
    3124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	8d 8b       	std	Y+21, r24	; 0x15
    312e:	9e 8b       	std	Y+22, r25	; 0x16
    3130:	af 8b       	std	Y+23, r26	; 0x17
    3132:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3134:	6d 89       	ldd	r22, Y+21	; 0x15
    3136:	7e 89       	ldd	r23, Y+22	; 0x16
    3138:	8f 89       	ldd	r24, Y+23	; 0x17
    313a:	98 8d       	ldd	r25, Y+24	; 0x18
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e8       	ldi	r20, 0x80	; 128
    3142:	5f e3       	ldi	r21, 0x3F	; 63
    3144:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3148:	88 23       	and	r24, r24
    314a:	2c f4       	brge	.+10     	; 0x3156 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	9c 8b       	std	Y+20, r25	; 0x14
    3152:	8b 8b       	std	Y+19, r24	; 0x13
    3154:	3f c0       	rjmp	.+126    	; 0x31d4 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3156:	6d 89       	ldd	r22, Y+21	; 0x15
    3158:	7e 89       	ldd	r23, Y+22	; 0x16
    315a:	8f 89       	ldd	r24, Y+23	; 0x17
    315c:	98 8d       	ldd	r25, Y+24	; 0x18
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	3f ef       	ldi	r19, 0xFF	; 255
    3162:	4f e7       	ldi	r20, 0x7F	; 127
    3164:	57 e4       	ldi	r21, 0x47	; 71
    3166:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    316a:	18 16       	cp	r1, r24
    316c:	4c f5       	brge	.+82     	; 0x31c0 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316e:	69 8d       	ldd	r22, Y+25	; 0x19
    3170:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e2       	ldi	r20, 0x20	; 32
    317c:	51 e4       	ldi	r21, 0x41	; 65
    317e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	bc 01       	movw	r22, r24
    3188:	cd 01       	movw	r24, r26
    318a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	9c 8b       	std	Y+20, r25	; 0x14
    3194:	8b 8b       	std	Y+19, r24	; 0x13
    3196:	0f c0       	rjmp	.+30     	; 0x31b6 <LCD_displayCharacter+0x7be>
    3198:	80 e9       	ldi	r24, 0x90	; 144
    319a:	91 e0       	ldi	r25, 0x01	; 1
    319c:	9a 8b       	std	Y+18, r25	; 0x12
    319e:	89 8b       	std	Y+17, r24	; 0x11
    31a0:	89 89       	ldd	r24, Y+17	; 0x11
    31a2:	9a 89       	ldd	r25, Y+18	; 0x12
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <LCD_displayCharacter+0x7ac>
    31a8:	9a 8b       	std	Y+18, r25	; 0x12
    31aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ac:	8b 89       	ldd	r24, Y+19	; 0x13
    31ae:	9c 89       	ldd	r25, Y+20	; 0x14
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	9c 8b       	std	Y+20, r25	; 0x14
    31b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b6:	8b 89       	ldd	r24, Y+19	; 0x13
    31b8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	69 f7       	brne	.-38     	; 0x3198 <LCD_displayCharacter+0x7a0>
    31be:	14 c0       	rjmp	.+40     	; 0x31e8 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c0:	6d 89       	ldd	r22, Y+21	; 0x15
    31c2:	7e 89       	ldd	r23, Y+22	; 0x16
    31c4:	8f 89       	ldd	r24, Y+23	; 0x17
    31c6:	98 8d       	ldd	r25, Y+24	; 0x18
    31c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9c 8b       	std	Y+20, r25	; 0x14
    31d2:	8b 8b       	std	Y+19, r24	; 0x13
    31d4:	8b 89       	ldd	r24, Y+19	; 0x13
    31d6:	9c 89       	ldd	r25, Y+20	; 0x14
    31d8:	98 8b       	std	Y+16, r25	; 0x10
    31da:	8f 87       	std	Y+15, r24	; 0x0f
    31dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31de:	98 89       	ldd	r25, Y+16	; 0x10
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <LCD_displayCharacter+0x7e8>
    31e4:	98 8b       	std	Y+16, r25	; 0x10
    31e6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	62 e0       	ldi	r22, 0x02	; 2
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <GPIO_writePin>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e8       	ldi	r26, 0x80	; 128
    31f8:	bf e3       	ldi	r27, 0x3F	; 63
    31fa:	8b 87       	std	Y+11, r24	; 0x0b
    31fc:	9c 87       	std	Y+12, r25	; 0x0c
    31fe:	ad 87       	std	Y+13, r26	; 0x0d
    3200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6b 85       	ldd	r22, Y+11	; 0x0b
    3204:	7c 85       	ldd	r23, Y+12	; 0x0c
    3206:	8d 85       	ldd	r24, Y+13	; 0x0d
    3208:	9e 85       	ldd	r25, Y+14	; 0x0e
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a e7       	ldi	r20, 0x7A	; 122
    3210:	55 e4       	ldi	r21, 0x45	; 69
    3212:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8f 83       	std	Y+7, r24	; 0x07
    321c:	98 87       	std	Y+8, r25	; 0x08
    321e:	a9 87       	std	Y+9, r26	; 0x09
    3220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3222:	6f 81       	ldd	r22, Y+7	; 0x07
    3224:	78 85       	ldd	r23, Y+8	; 0x08
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9e 83       	std	Y+6, r25	; 0x06
    3240:	8d 83       	std	Y+5, r24	; 0x05
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3244:	6f 81       	ldd	r22, Y+7	; 0x07
    3246:	78 85       	ldd	r23, Y+8	; 0x08
    3248:	89 85       	ldd	r24, Y+9	; 0x09
    324a:	9a 85       	ldd	r25, Y+10	; 0x0a
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6b 85       	ldd	r22, Y+11	; 0x0b
    325e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3260:	8d 85       	ldd	r24, Y+13	; 0x0d
    3262:	9e 85       	ldd	r25, Y+14	; 0x0e
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9e 83       	std	Y+6, r25	; 0x06
    3282:	8d 83       	std	Y+5, r24	; 0x05
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <LCD_displayCharacter+0x8ac>
    3286:	80 e9       	ldi	r24, 0x90	; 144
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	9c 83       	std	Y+4, r25	; 0x04
    328c:	8b 83       	std	Y+3, r24	; 0x03
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <LCD_displayCharacter+0x89a>
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <LCD_displayCharacter+0x88e>
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	6f 81       	ldd	r22, Y+7	; 0x07
    32b0:	78 85       	ldd	r23, Y+8	; 0x08
    32b2:	89 85       	ldd	r24, Y+9	; 0x09
    32b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <LCD_displayCharacter+0x8d6>
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    32d6:	cd 59       	subi	r28, 0x9D	; 157
    32d8:	df 4f       	sbci	r29, 0xFF	; 255
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	cd bf       	out	0x3d, r28	; 61
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <LCD_displayString+0x6>
    32f4:	0f 92       	push	r0
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	9b 83       	std	Y+3, r25	; 0x03
    32fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32fe:	19 82       	std	Y+1, r1	; 0x01
    3300:	0e c0       	rjmp	.+28     	; 0x331e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	9b 81       	ldd	r25, Y+3	; 0x03
    330c:	fc 01       	movw	r30, r24
    330e:	e2 0f       	add	r30, r18
    3310:	f3 1f       	adc	r31, r19
    3312:	80 81       	ld	r24, Z
    3314:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_displayCharacter>
		i++;
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	8f 5f       	subi	r24, 0xFF	; 255
    331c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	9b 81       	ldd	r25, Y+3	; 0x03
    3328:	fc 01       	movw	r30, r24
    332a:	e2 0f       	add	r30, r18
    332c:	f3 1f       	adc	r31, r19
    332e:	80 81       	ld	r24, Z
    3330:	88 23       	and	r24, r24
    3332:	39 f7       	brne	.-50     	; 0x3302 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	00 d0       	rcall	.+0      	; 0x3346 <LCD_moveCursor+0x6>
    3346:	00 d0       	rcall	.+0      	; 0x3348 <LCD_moveCursor+0x8>
    3348:	0f 92       	push	r0
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	8a 83       	std	Y+2, r24	; 0x02
    3350:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3352:	8a 81       	ldd	r24, Y+2	; 0x02
    3354:	28 2f       	mov	r18, r24
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	3d 83       	std	Y+5, r19	; 0x05
    335a:	2c 83       	std	Y+4, r18	; 0x04
    335c:	8c 81       	ldd	r24, Y+4	; 0x04
    335e:	9d 81       	ldd	r25, Y+5	; 0x05
    3360:	81 30       	cpi	r24, 0x01	; 1
    3362:	91 05       	cpc	r25, r1
    3364:	c1 f0       	breq	.+48     	; 0x3396 <LCD_moveCursor+0x56>
    3366:	2c 81       	ldd	r18, Y+4	; 0x04
    3368:	3d 81       	ldd	r19, Y+5	; 0x05
    336a:	22 30       	cpi	r18, 0x02	; 2
    336c:	31 05       	cpc	r19, r1
    336e:	2c f4       	brge	.+10     	; 0x337a <LCD_moveCursor+0x3a>
    3370:	8c 81       	ldd	r24, Y+4	; 0x04
    3372:	9d 81       	ldd	r25, Y+5	; 0x05
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	61 f0       	breq	.+24     	; 0x3390 <LCD_moveCursor+0x50>
    3378:	19 c0       	rjmp	.+50     	; 0x33ac <LCD_moveCursor+0x6c>
    337a:	2c 81       	ldd	r18, Y+4	; 0x04
    337c:	3d 81       	ldd	r19, Y+5	; 0x05
    337e:	22 30       	cpi	r18, 0x02	; 2
    3380:	31 05       	cpc	r19, r1
    3382:	69 f0       	breq	.+26     	; 0x339e <LCD_moveCursor+0x5e>
    3384:	8c 81       	ldd	r24, Y+4	; 0x04
    3386:	9d 81       	ldd	r25, Y+5	; 0x05
    3388:	83 30       	cpi	r24, 0x03	; 3
    338a:	91 05       	cpc	r25, r1
    338c:	61 f0       	breq	.+24     	; 0x33a6 <LCD_moveCursor+0x66>
    338e:	0e c0       	rjmp	.+28     	; 0x33ac <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	0b c0       	rjmp	.+22     	; 0x33ac <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	80 5c       	subi	r24, 0xC0	; 192
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	07 c0       	rjmp	.+14     	; 0x33ac <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	80 5f       	subi	r24, 0xF0	; 240
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	80 5b       	subi	r24, 0xB0	; 176
    33aa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	80 68       	ori	r24, 0x80	; 128
    33b0:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_sendCommand>
}
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <LCD_displayStringRowColumn+0x6>
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <LCD_displayStringRowColumn+0x8>
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	6a 83       	std	Y+2, r22	; 0x02
    33d4:	5c 83       	std	Y+4, r21	; 0x04
    33d6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	6a 81       	ldd	r22, Y+2	; 0x02
    33dc:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	9c 81       	ldd	r25, Y+4	; 0x04
    33e4:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
}
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	62 97       	sbiw	r28, 0x12	; 18
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	9a 8b       	std	Y+18, r25	; 0x12
    340c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    340e:	89 89       	ldd	r24, Y+17	; 0x11
    3410:	9a 89       	ldd	r25, Y+18	; 0x12
    3412:	9e 01       	movw	r18, r28
    3414:	2f 5f       	subi	r18, 0xFF	; 255
    3416:	3f 4f       	sbci	r19, 0xFF	; 255
    3418:	b9 01       	movw	r22, r18
    341a:	4a e0       	ldi	r20, 0x0A	; 10
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	0e 94 5f 1b 	call	0x36be	; 0x36be <itoa>
   LCD_displayString(buff); /* Display the string */
    3422:	ce 01       	movw	r24, r28
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	0e 94 77 19 	call	0x32ee	; 0x32ee <LCD_displayString>
}
    342a:	62 96       	adiw	r28, 0x12	; 18
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	08 95       	ret

0000343c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    343c:	df 93       	push	r29
    343e:	cf 93       	push	r28
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_sendCommand>
}
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	00 d0       	rcall	.+0      	; 0x3456 <UART_init+0x6>
    3456:	00 d0       	rcall	.+0      	; 0x3458 <UART_init+0x8>
    3458:	00 d0       	rcall	.+0      	; 0x345a <UART_init+0xa>
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
    345e:	6b 83       	std	Y+3, r22	; 0x03
    3460:	7c 83       	std	Y+4, r23	; 0x04
    3462:	8d 83       	std	Y+5, r24	; 0x05
    3464:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    3466:	1a 82       	std	Y+2, r1	; 0x02
    3468:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    346a:	eb e2       	ldi	r30, 0x2B	; 43
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	82 e0       	ldi	r24, 0x02	; 2
    3470:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3472:	ea e2       	ldi	r30, 0x2A	; 42
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	88 e1       	ldi	r24, 0x18	; 24
    3478:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    347a:	e0 e4       	ldi	r30, 0x40	; 64
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	86 e8       	ldi	r24, 0x86	; 134
    3480:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    3482:	8b 81       	ldd	r24, Y+3	; 0x03
    3484:	9c 81       	ldd	r25, Y+4	; 0x04
    3486:	ad 81       	ldd	r26, Y+5	; 0x05
    3488:	be 81       	ldd	r27, Y+6	; 0x06
    348a:	88 0f       	add	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	aa 1f       	adc	r26, r26
    3490:	bb 1f       	adc	r27, r27
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
    3496:	aa 1f       	adc	r26, r26
    3498:	bb 1f       	adc	r27, r27
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	aa 1f       	adc	r26, r26
    34a0:	bb 1f       	adc	r27, r27
    34a2:	9c 01       	movw	r18, r24
    34a4:	ad 01       	movw	r20, r26
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	94 e2       	ldi	r25, 0x24	; 36
    34aa:	a4 ef       	ldi	r26, 0xF4	; 244
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	bc 01       	movw	r22, r24
    34b0:	cd 01       	movw	r24, r26
    34b2:	0e 94 06 1b 	call	0x360c	; 0x360c <__udivmodsi4>
    34b6:	da 01       	movw	r26, r20
    34b8:	c9 01       	movw	r24, r18
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	9a 83       	std	Y+2, r25	; 0x02
    34be:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    34c0:	e0 e4       	ldi	r30, 0x40	; 64
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	9a 81       	ldd	r25, Y+2	; 0x02
    34c8:	89 2f       	mov	r24, r25
    34ca:	99 27       	eor	r25, r25
    34cc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    34ce:	e9 e2       	ldi	r30, 0x29	; 41
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	80 83       	st	Z, r24
}
    34d6:	26 96       	adiw	r28, 0x06	; 6
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	08 95       	ret

000034e8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	0f 92       	push	r0
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    34f4:	eb e2       	ldi	r30, 0x2B	; 43
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	88 2f       	mov	r24, r24
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	80 72       	andi	r24, 0x20	; 32
    3500:	90 70       	andi	r25, 0x00	; 0
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	b9 f3       	breq	.-18     	; 0x34f4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3506:	ec e2       	ldi	r30, 0x2C	; 44
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    350e:	0f 90       	pop	r0
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    351e:	eb e2       	ldi	r30, 0x2B	; 43
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	88 23       	and	r24, r24
    3526:	dc f7       	brge	.-10     	; 0x351e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3528:	ec e2       	ldi	r30, 0x2C	; 44
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
}
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	00 d0       	rcall	.+0      	; 0x353a <UART_sendString+0x6>
    353a:	0f 92       	push	r0
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	9b 83       	std	Y+3, r25	; 0x03
    3542:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3544:	19 82       	std	Y+1, r1	; 0x01
    3546:	0e c0       	rjmp	.+28     	; 0x3564 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	fc 01       	movw	r30, r24
    3554:	e2 0f       	add	r30, r18
    3556:	f3 1f       	adc	r31, r19
    3558:	80 81       	ld	r24, Z
    355a:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <UART_sendByte>
		i++;
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	8f 5f       	subi	r24, 0xFF	; 255
    3562:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	28 2f       	mov	r18, r24
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	9b 81       	ldd	r25, Y+3	; 0x03
    356e:	fc 01       	movw	r30, r24
    3570:	e2 0f       	add	r30, r18
    3572:	f3 1f       	adc	r31, r19
    3574:	80 81       	ld	r24, Z
    3576:	88 23       	and	r24, r24
    3578:	39 f7       	brne	.-50     	; 0x3548 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3586:	0f 93       	push	r16
    3588:	1f 93       	push	r17
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	00 d0       	rcall	.+0      	; 0x3590 <UART_receiveString+0xa>
    3590:	0f 92       	push	r0
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	9b 83       	std	Y+3, r25	; 0x03
    3598:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    359a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	9b 81       	ldd	r25, Y+3	; 0x03
    35a6:	8c 01       	movw	r16, r24
    35a8:	02 0f       	add	r16, r18
    35aa:	13 1f       	adc	r17, r19
    35ac:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_recieveByte>
    35b0:	f8 01       	movw	r30, r16
    35b2:	80 83       	st	Z, r24
    35b4:	0f c0       	rjmp	.+30     	; 0x35d4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	8f 5f       	subi	r24, 0xFF	; 255
    35ba:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	28 2f       	mov	r18, r24
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	8c 01       	movw	r16, r24
    35c8:	02 0f       	add	r16, r18
    35ca:	13 1f       	adc	r17, r19
    35cc:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UART_recieveByte>
    35d0:	f8 01       	movw	r30, r16
    35d2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	28 2f       	mov	r18, r24
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	9b 81       	ldd	r25, Y+3	; 0x03
    35de:	fc 01       	movw	r30, r24
    35e0:	e2 0f       	add	r30, r18
    35e2:	f3 1f       	adc	r31, r19
    35e4:	80 81       	ld	r24, Z
    35e6:	83 32       	cpi	r24, 0x23	; 35
    35e8:	31 f7       	brne	.-52     	; 0x35b6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    35ea:	89 81       	ldd	r24, Y+1	; 0x01
    35ec:	28 2f       	mov	r18, r24
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	9b 81       	ldd	r25, Y+3	; 0x03
    35f4:	fc 01       	movw	r30, r24
    35f6:	e2 0f       	add	r30, r18
    35f8:	f3 1f       	adc	r31, r19
    35fa:	10 82       	st	Z, r1
}
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	08 95       	ret

0000360c <__udivmodsi4>:
    360c:	a1 e2       	ldi	r26, 0x21	; 33
    360e:	1a 2e       	mov	r1, r26
    3610:	aa 1b       	sub	r26, r26
    3612:	bb 1b       	sub	r27, r27
    3614:	fd 01       	movw	r30, r26
    3616:	0d c0       	rjmp	.+26     	; 0x3632 <__udivmodsi4_ep>

00003618 <__udivmodsi4_loop>:
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	ee 1f       	adc	r30, r30
    361e:	ff 1f       	adc	r31, r31
    3620:	a2 17       	cp	r26, r18
    3622:	b3 07       	cpc	r27, r19
    3624:	e4 07       	cpc	r30, r20
    3626:	f5 07       	cpc	r31, r21
    3628:	20 f0       	brcs	.+8      	; 0x3632 <__udivmodsi4_ep>
    362a:	a2 1b       	sub	r26, r18
    362c:	b3 0b       	sbc	r27, r19
    362e:	e4 0b       	sbc	r30, r20
    3630:	f5 0b       	sbc	r31, r21

00003632 <__udivmodsi4_ep>:
    3632:	66 1f       	adc	r22, r22
    3634:	77 1f       	adc	r23, r23
    3636:	88 1f       	adc	r24, r24
    3638:	99 1f       	adc	r25, r25
    363a:	1a 94       	dec	r1
    363c:	69 f7       	brne	.-38     	; 0x3618 <__udivmodsi4_loop>
    363e:	60 95       	com	r22
    3640:	70 95       	com	r23
    3642:	80 95       	com	r24
    3644:	90 95       	com	r25
    3646:	9b 01       	movw	r18, r22
    3648:	ac 01       	movw	r20, r24
    364a:	bd 01       	movw	r22, r26
    364c:	cf 01       	movw	r24, r30
    364e:	08 95       	ret

00003650 <__prologue_saves__>:
    3650:	2f 92       	push	r2
    3652:	3f 92       	push	r3
    3654:	4f 92       	push	r4
    3656:	5f 92       	push	r5
    3658:	6f 92       	push	r6
    365a:	7f 92       	push	r7
    365c:	8f 92       	push	r8
    365e:	9f 92       	push	r9
    3660:	af 92       	push	r10
    3662:	bf 92       	push	r11
    3664:	cf 92       	push	r12
    3666:	df 92       	push	r13
    3668:	ef 92       	push	r14
    366a:	ff 92       	push	r15
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	ca 1b       	sub	r28, r26
    367a:	db 0b       	sbc	r29, r27
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	09 94       	ijmp

00003688 <__epilogue_restores__>:
    3688:	2a 88       	ldd	r2, Y+18	; 0x12
    368a:	39 88       	ldd	r3, Y+17	; 0x11
    368c:	48 88       	ldd	r4, Y+16	; 0x10
    368e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3690:	6e 84       	ldd	r6, Y+14	; 0x0e
    3692:	7d 84       	ldd	r7, Y+13	; 0x0d
    3694:	8c 84       	ldd	r8, Y+12	; 0x0c
    3696:	9b 84       	ldd	r9, Y+11	; 0x0b
    3698:	aa 84       	ldd	r10, Y+10	; 0x0a
    369a:	b9 84       	ldd	r11, Y+9	; 0x09
    369c:	c8 84       	ldd	r12, Y+8	; 0x08
    369e:	df 80       	ldd	r13, Y+7	; 0x07
    36a0:	ee 80       	ldd	r14, Y+6	; 0x06
    36a2:	fd 80       	ldd	r15, Y+5	; 0x05
    36a4:	0c 81       	ldd	r16, Y+4	; 0x04
    36a6:	1b 81       	ldd	r17, Y+3	; 0x03
    36a8:	aa 81       	ldd	r26, Y+2	; 0x02
    36aa:	b9 81       	ldd	r27, Y+1	; 0x01
    36ac:	ce 0f       	add	r28, r30
    36ae:	d1 1d       	adc	r29, r1
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	ed 01       	movw	r28, r26
    36bc:	08 95       	ret

000036be <itoa>:
    36be:	fb 01       	movw	r30, r22
    36c0:	9f 01       	movw	r18, r30
    36c2:	e8 94       	clt
    36c4:	42 30       	cpi	r20, 0x02	; 2
    36c6:	c4 f0       	brlt	.+48     	; 0x36f8 <itoa+0x3a>
    36c8:	45 32       	cpi	r20, 0x25	; 37
    36ca:	b4 f4       	brge	.+44     	; 0x36f8 <itoa+0x3a>
    36cc:	4a 30       	cpi	r20, 0x0A	; 10
    36ce:	29 f4       	brne	.+10     	; 0x36da <itoa+0x1c>
    36d0:	97 fb       	bst	r25, 7
    36d2:	1e f4       	brtc	.+6      	; 0x36da <itoa+0x1c>
    36d4:	90 95       	com	r25
    36d6:	81 95       	neg	r24
    36d8:	9f 4f       	sbci	r25, 0xFF	; 255
    36da:	64 2f       	mov	r22, r20
    36dc:	77 27       	eor	r23, r23
    36de:	0e 94 90 1b 	call	0x3720	; 0x3720 <__udivmodhi4>
    36e2:	80 5d       	subi	r24, 0xD0	; 208
    36e4:	8a 33       	cpi	r24, 0x3A	; 58
    36e6:	0c f0       	brlt	.+2      	; 0x36ea <itoa+0x2c>
    36e8:	89 5d       	subi	r24, 0xD9	; 217
    36ea:	81 93       	st	Z+, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	a1 f7       	brne	.-24     	; 0x36da <itoa+0x1c>
    36f2:	16 f4       	brtc	.+4      	; 0x36f8 <itoa+0x3a>
    36f4:	5d e2       	ldi	r21, 0x2D	; 45
    36f6:	51 93       	st	Z+, r21
    36f8:	10 82       	st	Z, r1
    36fa:	c9 01       	movw	r24, r18
    36fc:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <strrev>

00003700 <strrev>:
    3700:	dc 01       	movw	r26, r24
    3702:	fc 01       	movw	r30, r24
    3704:	67 2f       	mov	r22, r23
    3706:	71 91       	ld	r23, Z+
    3708:	77 23       	and	r23, r23
    370a:	e1 f7       	brne	.-8      	; 0x3704 <strrev+0x4>
    370c:	32 97       	sbiw	r30, 0x02	; 2
    370e:	04 c0       	rjmp	.+8      	; 0x3718 <strrev+0x18>
    3710:	7c 91       	ld	r23, X
    3712:	6d 93       	st	X+, r22
    3714:	70 83       	st	Z, r23
    3716:	62 91       	ld	r22, -Z
    3718:	ae 17       	cp	r26, r30
    371a:	bf 07       	cpc	r27, r31
    371c:	c8 f3       	brcs	.-14     	; 0x3710 <strrev+0x10>
    371e:	08 95       	ret

00003720 <__udivmodhi4>:
    3720:	aa 1b       	sub	r26, r26
    3722:	bb 1b       	sub	r27, r27
    3724:	51 e1       	ldi	r21, 0x11	; 17
    3726:	07 c0       	rjmp	.+14     	; 0x3736 <__udivmodhi4_ep>

00003728 <__udivmodhi4_loop>:
    3728:	aa 1f       	adc	r26, r26
    372a:	bb 1f       	adc	r27, r27
    372c:	a6 17       	cp	r26, r22
    372e:	b7 07       	cpc	r27, r23
    3730:	10 f0       	brcs	.+4      	; 0x3736 <__udivmodhi4_ep>
    3732:	a6 1b       	sub	r26, r22
    3734:	b7 0b       	sbc	r27, r23

00003736 <__udivmodhi4_ep>:
    3736:	88 1f       	adc	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	5a 95       	dec	r21
    373c:	a9 f7       	brne	.-22     	; 0x3728 <__udivmodhi4_loop>
    373e:	80 95       	com	r24
    3740:	90 95       	com	r25
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	08 95       	ret

00003748 <_exit>:
    3748:	f8 94       	cli

0000374a <__stop_program>:
    374a:	ff cf       	rjmp	.-2      	; 0x374a <__stop_program>
